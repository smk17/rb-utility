{"version":3,"sources":["Environment.js"],"names":["_ConsoleHelper","_interopRequireDefault","require","_ErrorHelper","_TypeHelper","_JsonHelper","Environment","s_globalErrorCallback","ex","isDebug","ConsoleHelper","error","message","stack","ErrorHelper","__printException","no","initialize","data","Object","defineProperty","get","s_data","tierFadeTime","enumerable","configurable","loggerLevel","logInfo","isException","TypeHelper","isType","Error","url","window","location","href","isString","additionData","value","key","isError","hasOwnProperty","globalErrorCallback"],"mappings":"2FAAA,IAAAA,eAAAC,uBAAAC,QAAA,oBACAC,aAAAF,uBAAAC,QAAA,kBACAE,YAAAH,uBAAAC,QAAA,iBACAG,YAAAJ,uBAAAC,QAAA,yFAHA,IAAAI,YAAA,WAQI,SAASA,KAkGT,OAhGAA,EAAYC,sBAAwB,SAAUC,GARlDF,EAAAG,QACAC,eAAAA,QAAAC,MAAA,CAAAC,QAAAJ,EAAAI,QAAAC,MAAAC,aAAAA,QAAAC,iBAAAP,KACAE,eAAAA,QAAAC,MAAA,oBAAAH,EAAAQ,GAAA,QAAAR,EAAAQ,GAAA,MAoBIV,EAAYW,WAAa,SAAUC,GAdnCZ,EAAYC,OAAAA,GAEJY,OAAAC,eAAAd,EAAA,eAAA,CADJe,IAIK,WACD,OAAAf,EAAAgB,OAAAC,cAEHC,YAAA,EARLC,cAAA,IA4BAN,OAAOC,eAAed,EAAa,UAAW,CAI1Ce,IAAK,WAlBTf,OAAYW,EAAaK,OAAUJ,SAAnCM,YAAA,EAsBIC,cAAc,IAlBdN,OAAAC,eAAAd,EAAA,cAAA,CAIGe,IAAE,WACD,OAAOf,EAAAgB,OAAmBC,aAE9BC,YAR+C,EAS/CC,cAAc,IAElBN,OAAOC,eAAed,EAAa,WAAW,CAIvCe,IAAE,WACD,OAAOf,EAAAgB,OAAmBb,UAE9Be,YAP0C,EAQ1CC,cAAc,IAOVnB,EAAOA,SAAYgB,SAAOI,EAA1BC,GAL0C,GAAArB,EAAAoB,aAAAA,GAOlCC,EAPkC,CAQlC,IAAET,EAAA,CARlBU,YAAAC,YAAAA,QAAAC,OAAAH,EAAAI,OAUOX,YAAed,EAClB0B,IAAAC,OAAAC,SAAAC,MAsBQ,GAAIN,YAAAA,QAAWO,SAAST,GAnB3BT,EAAYN,QAAAe,MAJ0B,CAAA,IAAAU,EAAA,GAAAC,OAAA,EAgC/B,IAAK,IAAIC,KAxBPV,YAAAA,QAAAW,QAAAb,KARlBU,EAAA,QAAAV,EAAAf,QAUAyB,EAAA,MAAAV,EAAAd,OAsBgCc,EACRA,EAAQc,eAAeF,KAEF,iBADrBD,EAAQX,EAAQY,MAnBjBD,EAAUZ,YAAAA,QAAaC,OAASW,IAElCD,EAAAE,GAAAD,GAGLZ,EAAaA,aAFNW,KAUP/B,EAAIuB,yBAAmBF,WACnBU,EAAAA,oBAA0BV,EAA1BpB,uBAKI+B,EAAAA,eAAe,SAAf9B,GAyBhBF,EAAYoC,qBAxBIpC,EAAIoC,oBAAJlC,IA4BxBF,EAAYgB,OAAS,CAzBGe,aAAAA,IACH5B,SAAA,EACJiB,YAAA,EA2BbQ,SAAU,SApDd5B,EAAAoC,oBAAApC,EAAAC,sBAiCAD,EA1GJ,YAuIeA","file":"Environment.js","sourcesContent":["import ConsoleHelper from \"./ConsoleHelper\";\nimport ErrorHelper from \"./ErrorHelper\";\nimport TypeHelper from \"./TypeHelper\";\nimport JsonHelper from \"./JsonHelper\";\n/**\n * 环境对象\n */\nvar Environment = /** @class */ (function () {\n    function Environment() {\n    }\n    Environment.s_globalErrorCallback = function (ex) {\n        if (Environment.isDebug) {\n            // UI.Dialogs.error(ex.message, ErrorHelper.__printException(ex));\n            ConsoleHelper.error({ message: ex.message, stack: ErrorHelper.__printException(ex) });\n        }\n        else {\n            // UI.Dialogs.error(\"当前操作失败，请联系系统管理员。\" + (ex.no ? \"操作编号：\" + ex.no : \"\"));\n            ConsoleHelper.error(\"当前操作失败，请联系系统管理员。\" + (ex.no ? \"操作编号：\" + ex.no : \"\"));\n        }\n    };\n    /**\n     * 初始化，由平台统一调用\n     * @param data 初始数据\n     */\n    Environment.initialize = function (data) {\n        Environment.s_data = data;\n    };\n    Object.defineProperty(Environment, \"tierFadeTime\", {\n        /**\n         * 弹出层淡出淡入时间\n         * @returns\n         */\n        get: function () {\n            return Environment.s_data.tierFadeTime;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Environment, \"isDebug\", {\n        /**\n         * 当前是否为调试模式\n         */\n        get: function () {\n            return Environment.s_data.isDebug;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Environment, \"loggerLevel\", {\n        /**\n         * 获取写日志的级别\n         */\n        get: function () {\n            return Environment.s_data.loggerLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Environment, \"location\", {\n        /**\n         * 获取当前显示的本地化信息\n         */\n        get: function () {\n            return Environment.s_data.location;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * 写日志\n     * @param loggerLevel 日志级别\n     * @param logInfo 日志信息\n     */\n    Environment.writeLog = function (loggerLevel, logInfo) {\n        if (loggerLevel >= Environment.loggerLevel) {\n            if (logInfo) {\n                var data = {\n                    isException: TypeHelper.isType(logInfo, Error),\n                    loggerLevel: loggerLevel,\n                    url: window.location.href\n                };\n                if (TypeHelper.isString(logInfo)) {\n                    data.message = logInfo;\n                }\n                else {\n                    var additionData = {}, value = void 0;\n                    if (TypeHelper.isError(logInfo)) {\n                        additionData[\"message\"] = logInfo.message;\n                        additionData[\"stack\"] = logInfo.stack;\n                    }\n                    for (var key in logInfo) {\n                        if (logInfo.hasOwnProperty(key)) {\n                            value = logInfo[key];\n                            if (typeof value !== \"string\") {\n                                value = JsonHelper.toJson(value);\n                            }\n                            additionData[key] = value;\n                        }\n                    }\n                    data.additionData = additionData;\n                }\n                // 调用服务写日志\n                // ServiceHelper.service({ type: \"common\", name: \"log\", params: { data: data } });\n            }\n        }\n    };\n    /**\n     * 复位全局异常处理\n     */\n    Environment.resetGlobalErrorCallback = function () {\n        Environment.globalErrorCallback = Environment.s_globalErrorCallback;\n    };\n    /**\n     * 处理捕获到的全局异常\n     * @param ex 异常对象\n     */\n    Environment.__processError = function (ex) {\n        if (Environment.globalErrorCallback) {\n            Environment.globalErrorCallback(ex);\n        }\n    };\n    Environment.s_data = {\n        tierFadeTime: 200,\n        isDebug: false,\n        loggerLevel: 6,\n        location: \"zh-cn\"\n    };\n    /**\n     * 指定自定义的全局异常回调处理\n     * @param {type} ex\n     * @returns\n     */\n    Environment.globalErrorCallback = Environment.s_globalErrorCallback;\n    return Environment;\n}());\nexport default Environment;\n"]}