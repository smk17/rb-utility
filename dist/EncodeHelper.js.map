{"version":3,"sources":["EncodeHelper.js"],"names":["EncodeHelper","encodeRegExpString","s","_regExpSC","RegExp","_specialCcharacter","regexp","join","replace","encodeXmlAttrValue","_xmlAttrSC","xmlValue","s_xmlAttrReplate","encodeXmlText","_xmlTextSC","xmlText","r","indexOf","s_xmlTextReplate","xmlTextTran","js"],"mappings":"2FAGA,IAAIA,aAA8B,WAC9B,SAASA,KAoCL,OArCJA,EAAYC,mBAAA,SAAAC,GAAG,OAAAA,GAGfF,EAAAG,YASQH,EAAaG,UAAY,IAAIC,OAAO,OAASJ,EAAaK,mBAAmBC,OAAOC,KAAK,MAAQ,KAAM,MAEpGL,EAAEM,QAAQR,EAAaG,UAAW,SAdH,IAUrCH,EAAAS,mBAAA,SAAAP,GAWD,OAAKA,GARJF,EAAAU,aAYGV,EAAaU,WAAa,IAAIN,OAAOJ,EAAaC,mBAAmBD,EAAaK,mBAAmBM,SAASJ,KAAK,KAAM,MAlBjIL,EAAAM,QAAAR,EAAAU,WAAAV,EAAAY,mBAISZ,IAsBTA,EAAaa,cAAgB,SAAUX,GAbvCF,OAAAA,GAGKA,EAAAc,aAeGd,EAAac,WAAa,IAAIV,OAAOJ,EAAaC,mBAAmBD,EAAaK,mBAAmBU,QAAQR,KAAK,KAAM,MAbxHP,EAAAA,QAAaU,EAAiBN,WAAOJ,EAAaC,mBAJ9CC,GAqBZF,EAAaY,iBAAmB,SAAUI,GAftC,OAASR,EAAQR,mBAAyBA,aAAaY,EAAAA,mBAAvDD,SAAAM,QAAAD,KAEJhB,EAAAkB,iBAAA,SAAAF,GAiBI,OAAOhB,EAAaK,mBAAmBc,YAAYnB,EAAaK,mBAAmBU,QAAQE,QAAQD,KAEvGhB,EAAaK,mBAAqB,CAC9BC,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,IAAK,IAAK,IAAK,KAC3EK,SAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,MAjB9CX,aAAaa,CAAAA,QAAgB,OAAA,OAAa,SAAA,SAAA,GAAA,IAClCE,QAAI,CAAA,IAAA,IAAA,KACJI,YAAA,CAAA,QAAA,OAAA,QACHC,GAAA,CAAA,IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,OACIpB,EArCqB,YAuCzBA","file":"EncodeHelper.js","sourcesContent":["/**\n * 编码辅助工具\n */\nvar EncodeHelper = /** @class */ (function () {\n    function EncodeHelper() {\n    }\n    /**\n     * 对字符串进行转义成正则表达式识别的表示型式\n     * @param s 要进行转义的字符串\n     */\n    EncodeHelper.encodeRegExpString = function (s) {\n        if (!s) {\n            return \"\";\n        }\n        if (!EncodeHelper._regExpSC) {\n            EncodeHelper._regExpSC = new RegExp(\"([\\\\\" + EncodeHelper._specialCcharacter.regexp.join(\"\\\\\") + \"])\", \"g\");\n        }\n        return s.replace(EncodeHelper._regExpSC, \"\\\\$1\");\n    };\n    /**\n     * 按XML属性值格式进行编码\n     * @param s 要进行编码的字符串\n     */\n    EncodeHelper.encodeXmlAttrValue = function (s) {\n        if (!s) {\n            return \"\";\n        }\n        if (!EncodeHelper._xmlAttrSC) {\n            EncodeHelper._xmlAttrSC = new RegExp(EncodeHelper.encodeRegExpString(EncodeHelper._specialCcharacter.xmlValue.join(\"\")), \"g\");\n        }\n        return s.replace(EncodeHelper._xmlAttrSC, EncodeHelper.s_xmlAttrReplate);\n    };\n    /**\n     * 按XML节点文本格式进行编码\n     * @param s 要进行编码的字符串\n     */\n    EncodeHelper.encodeXmlText = function (s) {\n        if (!s) {\n            return s;\n        }\n        if (!EncodeHelper._xmlTextSC) {\n            EncodeHelper._xmlTextSC = new RegExp(EncodeHelper.encodeRegExpString(EncodeHelper._specialCcharacter.xmlText.join(\"\")), \"g\");\n        }\n        return s.replace(EncodeHelper._xmlTextSC, EncodeHelper.s_xmlTextReplate);\n    };\n    EncodeHelper.s_xmlAttrReplate = function (r) {\n        return EncodeHelper._specialCcharacter.xmlValueTran[EncodeHelper._specialCcharacter.xmlValue.indexOf(r)];\n    };\n    EncodeHelper.s_xmlTextReplate = function (r) {\n        return EncodeHelper._specialCcharacter.xmlTextTran[EncodeHelper._specialCcharacter.xmlText.indexOf(r)];\n    };\n    EncodeHelper._specialCcharacter = {\n        regexp: [\"$\", \"(\", \")\", \"*\", \"+\", \".\", \"[\", \"]\", \"?\", \"\\\\\", \"/\", \"^\", \"{\", \"}\"],\n        xmlValue: [\"&\", \"<\", \">\", \"'\", '\"', \"\\r\", \"\\n\"],\n        xmlValueTran: [\"&amp;\", \"&lt;\", \"&gt;\", \"&apos;\", \"&quot;\", \"\", \"\"],\n        xmlText: [\"&\", \"<\", \">\"],\n        xmlTextTran: [\"&amp;\", \"&lt;\", \"&gt;\"],\n        js: ['\"', \"'\", \"/\", \"\\\\\", \"\\b\", \"\\f\", \"\\n\", \"\\r\", \"\\t\"]\n    };\n    return EncodeHelper;\n}());\nexport default EncodeHelper;\n"]}