{"version":3,"sources":["EncodeHelper.js"],"names":["EncodeHelper","s","_regExpSC","RegExp","_specialCcharacter","regexp","join","replace","_xmlAttrSC","encodeRegExpString","xmlValue","s_xmlAttrReplate","_xmlTextSC","xmlText","s_xmlTextReplate","r","xmlValueTran","indexOf","xmlTextTran","js"],"mappings":"qeAGqBA,kIAKSC,GACtB,OAAKA,GAGAD,EAAaE,YAZ1BF,EAAAE,UAAA,IAAAC,OAAA,OAAAH,EAAAI,mBAAAC,OAAAC,KAAA,MAAA,KAAA,MAeeL,EAAEM,QAAQP,EAAaE,UAAW,SAL9B,8CAWWD,GACtB,OAAKA,GAGAD,EAAaQ,aArBtBR,EAAAQ,WAAA,IAAAL,OAAAH,EAAAS,mBAAAT,EAAAI,mBAAAM,SAAAJ,KAAA,KAAA,MAwBWL,EAAEM,QAAQP,EAAaQ,WAAYR,EAAaW,mBAL5C,yCAWMV,GAtBjB,OAAKD,GA0BAA,EAAaY,aAvBlBZ,EAAiBA,WAAaE,IAAAA,OAAWF,EAAzCS,mBAAAT,EAAAI,mBAAAS,QAAAP,KAAA,KAAA,MAEJL,EAAAM,QAAAP,EAAAY,WAAAZ,EAAAc,mBAJQd,2CA8BgBe,GACpB,OAAOf,EAAaI,mBAAmBY,aAAahB,EAAaI,mBAAmBM,SAASO,QAAQF,6CAEjFA,GACpB,OAAOf,EAAaI,mBAAmBc,YAAYlB,EAAaI,mBAAmBS,QAAQI,QAAQF,4CAxB/FX,mBAAA,CACHC,OAAA,CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,IAAA,IAAA,IAAA,KA4BLK,SAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,MA3BtCM,aAAKhB,CAAAA,QAAaQ,OAAY,OAAA,SAAA,SAAA,GAAA,IAC1BR,QAAAA,CAAAA,IAAAA,IAAaQ,KAChBU,YAAA,CAAA,QAAA,OAAA,QA6BLC,GAAI,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM","file":"EncodeHelper.js","sourcesContent":["/**\n * 编码辅助工具\n */\nexport default class EncodeHelper {\n    /**\n     * 对字符串进行转义成正则表达式识别的表示型式\n     * @param s 要进行转义的字符串\n     */\n    static encodeRegExpString(s) {\n        if (!s) {\n            return \"\";\n        }\n        if (!EncodeHelper._regExpSC) {\n            EncodeHelper._regExpSC = new RegExp(\"([\\\\\" + EncodeHelper._specialCcharacter.regexp.join(\"\\\\\") + \"])\", \"g\");\n        }\n        return s.replace(EncodeHelper._regExpSC, \"\\\\$1\");\n    }\n    /**\n     * 按XML属性值格式进行编码\n     * @param s 要进行编码的字符串\n     */\n    static encodeXmlAttrValue(s) {\n        if (!s) {\n            return \"\";\n        }\n        if (!EncodeHelper._xmlAttrSC) {\n            EncodeHelper._xmlAttrSC = new RegExp(EncodeHelper.encodeRegExpString(EncodeHelper._specialCcharacter.xmlValue.join(\"\")), \"g\");\n        }\n        return s.replace(EncodeHelper._xmlAttrSC, EncodeHelper.s_xmlAttrReplate);\n    }\n    /**\n     * 按XML节点文本格式进行编码\n     * @param s 要进行编码的字符串\n     */\n    static encodeXmlText(s) {\n        if (!s) {\n            return s;\n        }\n        if (!EncodeHelper._xmlTextSC) {\n            EncodeHelper._xmlTextSC = new RegExp(EncodeHelper.encodeRegExpString(EncodeHelper._specialCcharacter.xmlText.join(\"\")), \"g\");\n        }\n        return s.replace(EncodeHelper._xmlTextSC, EncodeHelper.s_xmlTextReplate);\n    }\n    static s_xmlAttrReplate(r) {\n        return EncodeHelper._specialCcharacter.xmlValueTran[EncodeHelper._specialCcharacter.xmlValue.indexOf(r)];\n    }\n    static s_xmlTextReplate(r) {\n        return EncodeHelper._specialCcharacter.xmlTextTran[EncodeHelper._specialCcharacter.xmlText.indexOf(r)];\n    }\n}\nEncodeHelper._specialCcharacter = {\n    regexp: [\"$\", \"(\", \")\", \"*\", \"+\", \".\", \"[\", \"]\", \"?\", \"\\\\\", \"/\", \"^\", \"{\", \"}\"],\n    xmlValue: [\"&\", \"<\", \">\", \"'\", '\"', \"\\r\", \"\\n\"],\n    xmlValueTran: [\"&amp;\", \"&lt;\", \"&gt;\", \"&apos;\", \"&quot;\", \"\", \"\"],\n    xmlText: [\"&\", \"<\", \">\"],\n    xmlTextTran: [\"&amp;\", \"&lt;\", \"&gt;\"],\n    js: ['\"', \"'\", \"/\", \"\\\\\", \"\\b\", \"\\f\", \"\\n\", \"\\r\", \"\\t\"]\n};\n"]}