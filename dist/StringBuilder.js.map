{"version":3,"sources":["StringBuilder.js"],"names":["_TypeHelper","_interopRequireDefault","require","_StringHelper","StringBuilder","this","_parts","prototype","append","text","_i","arguments","length","text_1","_a","v","TypeHelper","isString","toString","push","appendFormat","args","undefined","StringHelper","format","appendLine","text_2","clear","isEmpty","i","separator","join"],"mappings":"2FAAA,IAAAA,YAAAC,uBAAAC,QAAA,iBACAC,cAAAF,uBAAAC,QAAA,2FAIA,IAAIE,cAA+B,WAC/B,SAASA,IANbC,KAAAC,OAAA,GAgEQ,OAlDJF,EAAcG,UAAUC,OAAS,WATjCJ,IAUI,IAAIK,EAAO,GAVFC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAGD,EAAAC,GAAAC,UAAAD,GAChB,IAASN,IAAAA,EAAAA,EAATS,EAAyBJ,EAAAK,EAAAD,EAAAD,OAAAE,IAAA,CAChBR,IAALS,EAAAF,EAAAC,GACHC,MAAAA,IACDC,YAAAA,QAAAC,SAAAF,KAcgBA,EAAIA,EAAEG,YAEVb,KAAKC,OAAOa,KAAKJ,IAGzB,OAAOV,MATPD,EAAcG,UAASa,aAAcP,SAAOD,GAmB5C,IAlBI,IAAKS,EAAGR,GAkBHH,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IAjB/BW,EAAKX,EAAN,GAAeC,UAAKW,GAGnB,OADGP,KAACT,OAAKY,KAAFK,cAAAA,QAAJC,OAAAA,EAAAH,IACHhB,MAVbD,EAAAG,UAAAkB,WAAA,WAqCI,IArBJ,IAAAhB,EAAA,GAqBaC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAKC,GAAMC,UAAUD,GAEzB,IAAK,IAAII,EAAK,EAAGY,EAASjB,EAAMK,EAAKY,EAAOd,OAAQE,IAAM,CACtD,IAAIC,EAAIW,EAAOZ,GACXC,MAAAA,IACKC,YAAAA,QAAWC,SAASF,KArBvBR,EAAAA,EAAUa,YAwBZf,KAAKC,OAAOa,KAAKJ,IAIzB,OAxBCV,KAAAC,OAAAa,KAAA,QAwBMd,MAMXD,EAAcG,UAAUoB,MAAQ,WAE5B,OADAtB,KAAKC,OAAS,GACPD,MAMXD,EAAcG,UAAUqB,QAAU,WA3B9B,GAA+B,IAA1BvB,KAAMC,OAAQM,OACVF,OAAMC,EA8Bf,IAAK,IAAIkB,EAAIxB,KAAKC,OAAOM,OAAS,EAAQ,GAALiB,EAAQA,IA5BxC,GAA6B,EAAvBxB,KAAMqB,OAAMG,GAAGpB,OACdiB,OAAM,EAEV,OAAKV,GAqCjBZ,EAAcG,UAAUW,SAAW,SAAUY,GA/BzC,OAAAzB,KAAAC,OAAAyB,KAAA,EAAApB,UAAAC,OAAAkB,EAAA,KACO1B,EA3DoB,YA6D/BA","file":"StringBuilder.js","sourcesContent":["import TypeHelper from \"./TypeHelper\";\nimport StringHelper from \"./StringHelper\";\n/**\n * 字符串构建器\n */\nvar StringBuilder = /** @class */ (function () {\n    function StringBuilder() {\n        this._parts = [];\n    }\n    /**\n     * 往对象后面追加指定的文本\n     * @param 要追加的文本\n     * @returns 返回StringBuilder对象\n     */\n    StringBuilder.prototype.append = function () {\n        var text = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            text[_i] = arguments[_i];\n        }\n        for (var _a = 0, text_1 = text; _a < text_1.length; _a++) {\n            var v = text_1[_a];\n            if (v !== null && v !== undefined) {\n                if (!TypeHelper.isString(v)) {\n                    v = v.toString();\n                }\n                this._parts.push(v);\n            }\n        }\n        return this;\n    };\n    /**\n     * 将指定的 String 中的格式项替换为指定的args实例的值的文本等效项，并添加到字符串缓冲对象中\n     * @param format 符合格式字符串\n     * @param args 要格式化的对象\n     * @returns 返回StringBuilder对象\n     */\n    StringBuilder.prototype.appendFormat = function (format) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        this._parts.push(StringHelper.format(format, args));\n        return this;\n    };\n    /**\n     * 往对象后面追加一行指定的文本，会在最后加一个制表和换行符\n     * @param text 要追加的文本，如果没有指定值，则只追加制表和换行符\n     * @returns 返回StringBuilder对象\n     */\n    StringBuilder.prototype.appendLine = function () {\n        var text = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            text[_i] = arguments[_i];\n        }\n        for (var _a = 0, text_2 = text; _a < text_2.length; _a++) {\n            var v = text_2[_a];\n            if (v !== null && v !== undefined) {\n                if (!TypeHelper.isString(v)) {\n                    v = v.toString();\n                }\n                this._parts.push(v);\n            }\n        }\n        this._parts.push(\"\\r\\n\");\n        return this;\n    };\n    /**\n     * 清除当前对象中的所有内容\n     * @returns 返回StringBuilder对象\n     */\n    StringBuilder.prototype.clear = function () {\n        this._parts = [];\n        return this;\n    };\n    /**\n     * 判断当前对象是否为空\n     * @returns 如果为空则返回true，否则返回false\n     */\n    StringBuilder.prototype.isEmpty = function () {\n        if (this._parts.length === 0) {\n            return true;\n        }\n        for (var i = this._parts.length - 1; i >= 0; i--) {\n            if (this._parts[i].length > 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * 返回当前对象中存储的所有字符串内容\n     * @param separator 在每次添加的字符串之间要添加的分隔符\n     * @returns 返回的字符串对象\n     */\n    StringBuilder.prototype.toString = function (separator) {\n        return this._parts.join(arguments.length > 0 ? separator : \"\");\n    };\n    return StringBuilder;\n}());\nexport default StringBuilder;\n"]}