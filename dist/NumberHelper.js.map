{"version":3,"sources":["NumberHelper.js"],"names":["_ErrorHelper","_interopRequireDefault","require","_TypeHelper","NumberHelper","parse","value","_typeof","Number","replace","indexOf","parseFloat","parseInt","ErrorHelper","_isNumberFormat","format","_getNumberFormat","begin","begin2","end","lastIndexOf","end2","digits","substring","_pad","n","length","zeros","_doFormatNumber","isGroup","formats","split","format0","_clearRegExp","format1","result","index","substr","decimals","decimalPlaces","round","String","value0","values","value1","i","Math","floor","decimal","TypeHelper","negative","rate","pow","unround","isNaN","sVal","toString","isNumber","calculate","left","right","op","_zeroRegex","leftDec","rightDec","zoom","isNegative","isPercent","isFormat","_eRegExp","exec","ms","toExponential","nf"],"mappings":"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","file":"NumberHelper.js","sourcesContent":["import ErrorHelper from \"./ErrorHelper\";\nimport TypeHelper from \"./TypeHelper\";\n/**\n * 数值帮助类\n */\nvar NumberHelper = /** @class */ (function () {\n    function NumberHelper() {\n    }\n    /**\n     * 将可以表示为数值的字符串转变成数值对象\n     * @param value 字符串型数值变量\n     */\n    NumberHelper.parse = function (value) {\n        if (!value) {\n            return 0;\n        }\n        switch (typeof value) {\n            case \"number\":\n                return Number(value);\n            case \"string\":\n                value = value.replace(/,/g, \"\");\n                if (value.indexOf(\".\") >= 0) {\n                    return parseFloat(value);\n                }\n                else {\n                    return parseInt(value, 10);\n                }\n            default:\n                throw ErrorHelper.argument(\"value\", \"值必须是字符串或者数值。\");\n        }\n    };\n    NumberHelper._isNumberFormat = function (format) {\n        return format.indexOf(\"0\") !== -1 || format.indexOf(\"#\") !== -1;\n    };\n    NumberHelper._getNumberFormat = function (format) {\n        if (!format)\n            return null;\n        var begin = format.indexOf(\"0\");\n        var begin2 = format.indexOf(\"#\");\n        if (begin === -1 || (begin2 !== -1 && begin2 < begin))\n            begin = begin2;\n        if (begin < 0) {\n            return null;\n        }\n        var end = format.lastIndexOf(\"0\");\n        var end2 = format.lastIndexOf(\"#\");\n        if (end === -1 || (end2 !== -1 && end2 > end))\n            end = end2;\n        var digits = format.lastIndexOf(\".\");\n        digits > 0 ? (digits = end === end2 ? 6 : end - digits) : (digits = 0);\n        return { begin: begin, end: end, digits: digits, format: format.substring(begin, end + 1) };\n    };\n    NumberHelper._pad = function (value, digits, end) {\n        var n = digits - value.length;\n        if (n > 0) {\n            var zeros = \"\";\n            while (n) {\n                n -= 1;\n                zeros += \"0\";\n            }\n            return end ? value + zeros : zeros + value;\n        }\n        return value;\n    };\n    NumberHelper._doFormatNumber = function (value, format) {\n        value = Math.abs(value);\n        var isGroup = format.indexOf(\",\") !== -1, formats = format.split(\".\"), format0 = (formats[0] || \"\").replace(NumberHelper._clearRegExp, \"\"), format1 = (formats[1] || \"\").replace(NumberHelper._clearRegExp, \"\"), result = \"\";\n        var index = format0.indexOf(\"0\");\n        format0 = index === -1 ? \"0\" : format0.substr(index) || \"0\";\n        var decimals = format1.length;\n        var decimalPlaces = format1.substr(0, format1.lastIndexOf(\"0\") + 1).length;\n        value = NumberHelper.round(value, decimals);\n        var values = String(value).split(\".\"), value0 = values[0], value1 = values[1] || \"\";\n        if (value0) {\n            value0 = NumberHelper._pad(value0, format0.length);\n            if (isGroup) {\n                for (var i = 0; i < Math.floor((value0.length - (1 + i)) / 3); i++) {\n                    value0 =\n                        value0.substring(0, value0.length - (4 * i + 3)) +\n                            \",\" +\n                            value0.substring(value0.length - (4 * i + 3));\n                }\n            }\n            result += value0;\n        }\n        if (decimals > 0) {\n            result += \".\";\n            result += NumberHelper._pad(value1.substr(0, decimals), decimalPlaces, true);\n        }\n        return result;\n    };\n    /**\n     * 对指定的数值型四舍五入到指定的精度范围内\n     * @param value 要进行精度处理的数值\n     * @param decimal 要保留的精度值(小数位).默认为0\n     * @returns 返回处理后的值\n     */\n    NumberHelper.round = function (value, decimal) {\n        if (decimal === void 0) { decimal = 0; }\n        if (isNaN(value)) {\n            return 0;\n        }\n        if (!TypeHelper.isNumber(decimal)) {\n            decimal = 0;\n        }\n        else if (decimal < 0) {\n            decimal = 0;\n        }\n        var negative;\n        if (value < 0) {\n            negative = true;\n            value = 0 - value;\n        }\n        if (decimal === 0) {\n            value = Math.round(value);\n        }\n        else {\n            var rate = Math.pow(10, decimal);\n            value *= rate;\n            value = Math.round(value);\n            value /= rate;\n        }\n        return negative ? 0 - value : value;\n    };\n    /**\n     * 对指定的数值型保留到指定的精度范围内，且不进行四舍五入\n     * @param value 要进行精度处理的数值\n     * @param decimal 要保留的精度值(小数位).默认为0\n     * @returns 返回处理后的值\n     */\n    NumberHelper.unround = function (value, decimal) {\n        if (decimal === void 0) { decimal = 0; }\n        var index;\n        if (isNaN(value)) {\n            return 0;\n        }\n        decimal = decimal || 0;\n        if (value === 0) {\n            return 0;\n        }\n        else {\n            var sVal = value.toString();\n            index = sVal.indexOf(\".\");\n            if (decimal + index < sVal.length) {\n                return value;\n            }\n            else {\n                return parseFloat(sVal.substr(0, index + decimal));\n            }\n        }\n    };\n    /**\n     * 对指定的2个数进行指定的算术运算\n     * @param left 左操作数\n     * @param right 右操作数\n     * @param op 运算类型。可以是('+','-','*','/')其中的一个\n     * @param decimal 要保留的小数位。可以是0－6范围内的整型，含0和6。默认为6\n     * @returns 返回计算后的值\n     */\n    NumberHelper.calculate = function (left, right, op, decimal) {\n        if (decimal === void 0) { decimal = 2; }\n        if (!decimal && decimal !== 0) {\n            decimal = 6;\n        }\n        if (left) {\n            \"number\" === typeof left\n                ? (left = left.toString())\n                : (left = left.replace(NumberHelper._zeroRegex, \"\"));\n        }\n        else {\n            left = 0;\n        }\n        if (right) {\n            \"number\" === typeof right\n                ? (right = right.toString())\n                : (right = right.replace(NumberHelper._zeroRegex, \"\"));\n        }\n        else {\n            right = 0;\n        }\n        if (!left || !right) {\n            switch (op) {\n                case \"+\":\n                    return NumberHelper.parse(left || right);\n                case \"-\":\n                    return left ? NumberHelper.parse(left) : 0 - NumberHelper.parse(right);\n                default:\n                    return 0;\n            }\n        }\n        var index = left.indexOf(\".\"), leftDec, rightDec, zoom, value;\n        if (index > 0) {\n            leftDec = left.length - index - 1;\n            left = left.replace(\".\", \"\");\n        }\n        else {\n            leftDec = 0;\n        }\n        index = right.indexOf(\".\");\n        if (index > 0) {\n            rightDec = right.length - index - 1;\n            right = right.replace(\".\", \"\");\n        }\n        else {\n            rightDec = 0;\n        }\n        left = parseInt(left, 10);\n        right = parseInt(right, 10);\n        if (op === \"+\" || op === \"-\") {\n            // 放大到相同倍数\n            zoom = leftDec - rightDec;\n            if (zoom < 0) {\n                left *= Math.pow(10, 0 - zoom);\n                zoom = rightDec;\n            }\n            else if (zoom > 0) {\n                right *= Math.pow(10, zoom);\n                zoom = leftDec;\n            }\n            else {\n                zoom = leftDec;\n            }\n            op === \"+\" ? (value = left + right) : (value = left - right);\n            if (zoom > decimal) {\n                value = Math.round(value / Math.pow(10, zoom - decimal));\n            }\n            else {\n                decimal = zoom;\n            }\n        }\n        else {\n            // 将各自放到到整数\n            if (op === \"*\") {\n                zoom = leftDec + rightDec;\n                value = left * right;\n                value = Math.round(value / Math.pow(10, zoom - decimal));\n            }\n            else {\n                if (leftDec > rightDec + decimal) {\n                    value = Math.round(left / right / Math.pow(10, leftDec - rightDec - decimal));\n                }\n                else if (leftDec < rightDec + decimal) {\n                    value = Math.round((left * Math.pow(10, rightDec + decimal - leftDec)) / right);\n                }\n                else {\n                    value = Math.round(left / right);\n                }\n            }\n        }\n        return decimal === 0 ? value : value / Math.pow(10, decimal);\n    };\n    /**\n     * 格式化数值对象到指定的格式\n     * @param value 一个数值对象或者可以转换成数值对象的字符串\n     * @param format 格式信息('#'表示可选占位符;'0'表示固定占位符;'.'表示小数点,只能出现一次;','表示千分号,且只能出现一次;其它符号只能出现在2端,如:￥#,##0.00%).特别说明虽然最后加了'%',但是不会对数值进行*100处理\n     * @returns 返回格式化后的字符串形式\n     */\n    NumberHelper.format = function (value, format) {\n        if (TypeHelper.isNumber(value) === false) {\n            if (!value) {\n                return \"\";\n            }\n            if (!format) {\n                return String(value);\n            }\n            value = NumberHelper.parse(value);\n        }\n        if (!format) {\n            return value.toString();\n        }\n        var formats = format.split(\";\"), isNegative = value < 0;\n        format = formats[0];\n        if (isNegative && formats.length >= 2)\n            format = formats[1];\n        if (value === 0 && formats.length >= 3)\n            format = formats[2];\n        var isPercent = format.indexOf(\"%\") !== -1, isFormat = NumberHelper._isNumberFormat(format);\n        value = isPercent ? Number(value) * 100 : Number(value);\n        var ms = NumberHelper._eRegExp.exec(format);\n        if (ms) {\n            var decimals = parseInt(ms[2], 10);\n            return isNaN(decimals) ? value.toExponential() : value.toExponential(decimals);\n        }\n        if (!isFormat)\n            return format;\n        var result = \"\", nf = NumberHelper._getNumberFormat(format);\n        if (nf !== null) {\n            result = NumberHelper._doFormatNumber(value, nf.format);\n            if (isNegative) {\n                result = \"-\" + result;\n            }\n            result = format.substr(0, nf.begin) + result + format.substr(nf.end + 1);\n        }\n        else {\n            result = format;\n        }\n        return result;\n    };\n    NumberHelper._eRegExp = /^(e)(\\d*)$/i;\n    NumberHelper._clearRegExp = /[^0#]/g;\n    NumberHelper._zeroRegex = /(,)|([0|.]*$)/g;\n    return NumberHelper;\n}());\nexport default NumberHelper;\n"]}