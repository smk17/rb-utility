{"version":3,"sources":["NumberHelper.js"],"names":["_ErrorHelper","_interopRequireDefault","require","_TypeHelper","NumberHelper","value","_typeof","Number","replace","indexOf","parseFloat","parseInt","ErrorHelper","argument","format","begin","begin2","end","lastIndexOf","end2","digits","substring","n","zeros","isGroup","formats","split","format0","_clearRegExp","format1","result","index","substr","decimals","length","value0","values","value1","_pad","i","Math","floor","decimalPlaces","negative","decimal","arguments","undefined","isNaN","isNumber","pow","rate","round","toString","sVal","left","right","op","TypeHelper","_zeroRegex","parse","leftDec","rightDec","zoom","String","isNegative","isPercent","isFormat","_isNumberFormat","ms","_eRegExp","exec","toExponential","nf","_getNumberFormat","_doFormatNumber"],"mappings":"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","file":"NumberHelper.js","sourcesContent":["import ErrorHelper from \"./ErrorHelper\";\nimport TypeHelper from \"./TypeHelper\";\n/**\n * 数值帮助类\n */\nexport default class NumberHelper {\n    /**\n     * 将可以表示为数值的字符串转变成数值对象\n     * @param value 字符串型数值变量\n     */\n    static parse(value) {\n        if (!value) {\n            return 0;\n        }\n        switch (typeof value) {\n            case \"number\":\n                return Number(value);\n            case \"string\":\n                value = value.replace(/,/g, \"\");\n                if (value.indexOf(\".\") >= 0) {\n                    return parseFloat(value);\n                }\n                else {\n                    return parseInt(value, 10);\n                }\n            default:\n                throw ErrorHelper.argument(\"value\", \"值必须是字符串或者数值。\");\n        }\n    }\n    static _isNumberFormat(format) {\n        return format.indexOf(\"0\") !== -1 || format.indexOf(\"#\") !== -1;\n    }\n    static _getNumberFormat(format) {\n        if (!format)\n            return null;\n        let begin = format.indexOf(\"0\");\n        let begin2 = format.indexOf(\"#\");\n        if (begin === -1 || (begin2 !== -1 && begin2 < begin))\n            begin = begin2;\n        if (begin < 0) {\n            return null;\n        }\n        let end = format.lastIndexOf(\"0\");\n        let end2 = format.lastIndexOf(\"#\");\n        if (end === -1 || (end2 !== -1 && end2 > end))\n            end = end2;\n        let digits = format.lastIndexOf(\".\");\n        digits > 0 ? (digits = end === end2 ? 6 : end - digits) : (digits = 0);\n        return { begin, end, digits, format: format.substring(begin, end + 1) };\n    }\n    static _pad(value, digits, end) {\n        let n = digits - value.length;\n        if (n > 0) {\n            let zeros = \"\";\n            while (n) {\n                n -= 1;\n                zeros += \"0\";\n            }\n            return end ? value + zeros : zeros + value;\n        }\n        return value;\n    }\n    static _doFormatNumber(value, format) {\n        value = Math.abs(value);\n        let isGroup = format.indexOf(\",\") !== -1, formats = format.split(\".\"), format0 = (formats[0] || \"\").replace(NumberHelper._clearRegExp, \"\"), format1 = (formats[1] || \"\").replace(NumberHelper._clearRegExp, \"\"), result = \"\";\n        let index = format0.indexOf(\"0\");\n        format0 = index === -1 ? \"0\" : format0.substr(index) || \"0\";\n        let decimals = format1.length;\n        let decimalPlaces = format1.substr(0, format1.lastIndexOf(\"0\") + 1).length;\n        value = NumberHelper.round(value, decimals);\n        let values = String(value).split(\".\"), value0 = values[0], value1 = values[1] || \"\";\n        if (value0) {\n            value0 = NumberHelper._pad(value0, format0.length);\n            if (isGroup) {\n                for (let i = 0; i < Math.floor((value0.length - (1 + i)) / 3); i++) {\n                    value0 =\n                        value0.substring(0, value0.length - (4 * i + 3)) +\n                            \",\" +\n                            value0.substring(value0.length - (4 * i + 3));\n                }\n            }\n            result += value0;\n        }\n        if (decimals > 0) {\n            result += \".\";\n            result += NumberHelper._pad(value1.substr(0, decimals), decimalPlaces, true);\n        }\n        return result;\n    }\n    /**\n     * 对指定的数值型四舍五入到指定的精度范围内\n     * @param value 要进行精度处理的数值\n     * @param decimal 要保留的精度值(小数位).默认为0\n     * @returns 返回处理后的值\n     */\n    static round(value, decimal = 0) {\n        if (isNaN(value)) {\n            return 0;\n        }\n        if (!TypeHelper.isNumber(decimal)) {\n            decimal = 0;\n        }\n        else if (decimal < 0) {\n            decimal = 0;\n        }\n        let negative;\n        if (value < 0) {\n            negative = true;\n            value = 0 - value;\n        }\n        if (decimal === 0) {\n            value = Math.round(value);\n        }\n        else {\n            let rate = Math.pow(10, decimal);\n            value *= rate;\n            value = Math.round(value);\n            value /= rate;\n        }\n        return negative ? 0 - value : value;\n    }\n    /**\n     * 对指定的数值型保留到指定的精度范围内，且不进行四舍五入\n     * @param value 要进行精度处理的数值\n     * @param decimal 要保留的精度值(小数位).默认为0\n     * @returns 返回处理后的值\n     */\n    static unround(value, decimal = 0) {\n        let index;\n        if (isNaN(value)) {\n            return 0;\n        }\n        decimal = decimal || 0;\n        if (value === 0) {\n            return 0;\n        }\n        else {\n            let sVal = value.toString();\n            index = sVal.indexOf(\".\");\n            if (decimal + index < sVal.length) {\n                return value;\n            }\n            else {\n                return parseFloat(sVal.substr(0, index + decimal));\n            }\n        }\n    }\n    /**\n     * 对指定的2个数进行指定的算术运算\n     * @param left 左操作数\n     * @param right 右操作数\n     * @param op 运算类型。可以是('+','-','*','/')其中的一个\n     * @param decimal 要保留的小数位。可以是0－6范围内的整型，含0和6。默认为6\n     * @returns 返回计算后的值\n     */\n    static calculate(left, right, op, decimal = 2) {\n        if (!decimal && decimal !== 0) {\n            decimal = 6;\n        }\n        if (left) {\n            \"number\" === typeof left\n                ? (left = left.toString())\n                : (left = left.replace(NumberHelper._zeroRegex, \"\"));\n        }\n        else {\n            left = 0;\n        }\n        if (right) {\n            \"number\" === typeof right\n                ? (right = right.toString())\n                : (right = right.replace(NumberHelper._zeroRegex, \"\"));\n        }\n        else {\n            right = 0;\n        }\n        if (!left || !right) {\n            switch (op) {\n                case \"+\":\n                    return NumberHelper.parse(left || right);\n                case \"-\":\n                    return left ? NumberHelper.parse(left) : 0 - NumberHelper.parse(right);\n                default:\n                    return 0;\n            }\n        }\n        let index = left.indexOf(\".\"), leftDec, rightDec, zoom, value;\n        if (index > 0) {\n            leftDec = left.length - index - 1;\n            left = left.replace(\".\", \"\");\n        }\n        else {\n            leftDec = 0;\n        }\n        index = right.indexOf(\".\");\n        if (index > 0) {\n            rightDec = right.length - index - 1;\n            right = right.replace(\".\", \"\");\n        }\n        else {\n            rightDec = 0;\n        }\n        left = parseInt(left, 10);\n        right = parseInt(right, 10);\n        if (op === \"+\" || op === \"-\") {\n            // 放大到相同倍数\n            zoom = leftDec - rightDec;\n            if (zoom < 0) {\n                left *= Math.pow(10, 0 - zoom);\n                zoom = rightDec;\n            }\n            else if (zoom > 0) {\n                right *= Math.pow(10, zoom);\n                zoom = leftDec;\n            }\n            else {\n                zoom = leftDec;\n            }\n            op === \"+\" ? (value = left + right) : (value = left - right);\n            if (zoom > decimal) {\n                value = Math.round(value / Math.pow(10, zoom - decimal));\n            }\n            else {\n                decimal = zoom;\n            }\n        }\n        else {\n            // 将各自放到到整数\n            if (op === \"*\") {\n                zoom = leftDec + rightDec;\n                value = left * right;\n                value = Math.round(value / Math.pow(10, zoom - decimal));\n            }\n            else {\n                if (leftDec > rightDec + decimal) {\n                    value = Math.round(left / right / Math.pow(10, leftDec - rightDec - decimal));\n                }\n                else if (leftDec < rightDec + decimal) {\n                    value = Math.round((left * Math.pow(10, rightDec + decimal - leftDec)) / right);\n                }\n                else {\n                    value = Math.round(left / right);\n                }\n            }\n        }\n        return decimal === 0 ? value : value / Math.pow(10, decimal);\n    }\n    /**\n     * 格式化数值对象到指定的格式\n     * @param value 一个数值对象或者可以转换成数值对象的字符串\n     * @param format 格式信息('#'表示可选占位符;'0'表示固定占位符;'.'表示小数点,只能出现一次;','表示千分号,且只能出现一次;其它符号只能出现在2端,如:￥#,##0.00%).特别说明虽然最后加了'%',但是不会对数值进行*100处理\n     * @returns 返回格式化后的字符串形式\n     */\n    static format(value, format) {\n        if (TypeHelper.isNumber(value) === false) {\n            if (!value) {\n                return \"\";\n            }\n            if (!format) {\n                return String(value);\n            }\n            value = NumberHelper.parse(value);\n        }\n        if (!format) {\n            return value.toString();\n        }\n        let formats = format.split(\";\"), isNegative = value < 0;\n        format = formats[0];\n        if (isNegative && formats.length >= 2)\n            format = formats[1];\n        if (value === 0 && formats.length >= 3)\n            format = formats[2];\n        let isPercent = format.indexOf(\"%\") !== -1, isFormat = NumberHelper._isNumberFormat(format);\n        value = isPercent ? Number(value) * 100 : Number(value);\n        let ms = NumberHelper._eRegExp.exec(format);\n        if (ms) {\n            let decimals = parseInt(ms[2], 10);\n            return isNaN(decimals) ? value.toExponential() : value.toExponential(decimals);\n        }\n        if (!isFormat)\n            return format;\n        let result = \"\", nf = NumberHelper._getNumberFormat(format);\n        if (nf !== null) {\n            result = NumberHelper._doFormatNumber(value, nf.format);\n            if (isNegative) {\n                result = \"-\" + result;\n            }\n            result = format.substr(0, nf.begin) + result + format.substr(nf.end + 1);\n        }\n        else {\n            result = format;\n        }\n        return result;\n    }\n}\nNumberHelper._eRegExp = /^(e)(\\d*)$/i;\nNumberHelper._clearRegExp = /[^0#]/g;\nNumberHelper._zeroRegex = /(,)|([0|.]*$)/g;\n"]}