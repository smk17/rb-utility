{"version":3,"sources":["EventDriver.js"],"names":["EventDriver","register","event","callback","reciverlist","regtable","i","mark","splice","send","props","_i","arguments","length","_a","reciverlist_1","apply"],"mappings":"2FAGA,IAAIA,YAA6B,WAC7B,SAASA,KAiDT,OAlDcA,EAAAC,SAAA,SAAAC,EAAAC,GAAe,IAAYC,EAAAJ,EAAAK,SAAAH,IAAA,GACzCE,EAASJ,KAAcG,GAEvBH,EAAAK,SAAAH,GAAAE,GAKAJ,EAAYC,WAAW,SAAUC,EAAOC,GAGpCH,IAFII,IAAAA,EAAcJ,EAAYK,SAASH,IAAvC,GACAE,GAAA,EACYC,EAAAA,EAAZC,EAAqBJ,EAASE,IAHlC,GAAAA,EAAAE,KAAAH,EAAA,CAKAI,EAAAD,EAWY,OAGM,IAAVC,GACAH,EAAYI,OAAOD,EAAM,IALrBA,EAAAE,KAAA,SAAAP,GAEH,IADG,IAAAQ,EAAA,GACHC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IACJD,EAAAC,EAAA,GAAAC,UAAAD,GACGJ,IAAIH,EAASJ,EAAAK,SAAAH,GACbE,GAAAA,EACH,IAAA,IAAAU,EAAA,EAAAC,EAAAX,EAAAU,EAAAC,EAAAF,OAAAC,IAAA,CAXLC,EAAAD,GAaAE,WAAA,EAAAN,KAkBAV,EAAYK,SAAW,GAChBL,EAlDsB,YAoCjBS","file":"EventDriver.js","sourcesContent":["/**\n * 事件通知\n */\nvar EventDriver = /** @class */ (function () {\n    function EventDriver() {\n    }\n    /**\n     * 注册一个事件\n     * @param event 事件名称\n     * @param callback 事件触发时的回调函数\n     */\n    EventDriver.register = function (event, callback) {\n        var reciverlist = EventDriver.regtable[event] || [];\n        reciverlist.push(callback);\n        EventDriver.regtable[event] = reciverlist;\n    };\n    /**\n     * 卸载一个事件\n     * @param event 事件名称\n     * @param callback 注册事件时传入的回调函数\n     */\n    EventDriver.unregister = function (event, callback) {\n        var reciverlist = EventDriver.regtable[event] || [];\n        var mark = -1;\n        for (var i = 0; i < reciverlist; i++) {\n            if (reciverlist[i] === callback) {\n                mark = i;\n                break;\n            }\n        }\n        if (mark !== -1) {\n            reciverlist.splice(mark, 1);\n        }\n    };\n    /**\n     * 给存在的事件发送通知\n     * @param event 事件名称\n     * @param props 需要传递给事件回调函数的参数\n     */\n    EventDriver.send = function (event) {\n        var props = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            props[_i - 1] = arguments[_i];\n        }\n        var reciverlist = EventDriver.regtable[event];\n        if (reciverlist) {\n            for (var _a = 0, reciverlist_1 = reciverlist; _a < reciverlist_1.length; _a++) {\n                var reciver = reciverlist_1[_a];\n                reciver.apply(void 0, props);\n            }\n        }\n    };\n    EventDriver.regtable = [];\n    return EventDriver;\n}());\nexport default EventDriver;\n"]}