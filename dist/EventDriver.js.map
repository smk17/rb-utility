{"version":3,"sources":["EventDriver.js"],"names":["EventDriver","event","callback","reciverlist","regtable","push","mark","i","splice","_len","arguments","length","props","Array","_key","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","apply","err","return"],"mappings":"qeAGqBA,uHAMDC,EAAOC,GACnB,IAAMC,EAAcH,EAAYI,SAASH,IAAU,GACnDE,EAAYE,KAAKH,GACjBF,EAAYI,SAASH,GAASE,qCAOhBF,EAAOC,GAGrB,IAFA,IAAMC,EAAcH,EAAYI,SAASH,IAAU,GAC/CK,GAAQ,EACHC,EAAI,EAAGA,EAAIJ,EAAaI,IAC7B,GAAIJ,EAAYI,KAAOL,EAAU,CAC7BI,EAAOC,EACP,OAGM,IAAVD,GACAH,EAAYK,OAAOF,EAAM,gCAQrBL,GACR,IAAME,EAAcH,EAAYI,SAASH,GACzC,GAAIE,EAAa,CAAA,IAAA,IAAAM,EAAAC,UAAAC,OAFCC,EAED,IAAAC,MAAA,EAAAJ,EAAAA,EAAA,EAAA,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAFCF,EAEDE,EAAA,GAAAJ,UAAAI,GAAA,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACb,IAAA,IAAAC,EAAAC,EAAsBjB,EAAtBkB,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAmC,CAAAI,EAAAM,MACxBC,WAAP,EAAWd,IAFF,MAAAe,GAAAX,GAAA,EAAAC,EAAAU,EAAA,QAAA,IAAAZ,GAAA,MAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,QAAA,GAAAZ,EAAA,MAAAC,4CAlBbX,SAAJ","file":"EventDriver.js","sourcesContent":["/**\n * 事件通知\n */\nexport default class EventDriver {\n    /**\n     * 注册一个事件\n     * @param event 事件名称\n     * @param callback 事件触发时的回调函数\n     */\n    static register(event, callback) {\n        const reciverlist = EventDriver.regtable[event] || [];\n        reciverlist.push(callback);\n        EventDriver.regtable[event] = reciverlist;\n    }\n    /**\n     * 卸载一个事件\n     * @param event 事件名称\n     * @param callback 注册事件时传入的回调函数\n     */\n    static unregister(event, callback) {\n        const reciverlist = EventDriver.regtable[event] || [];\n        let mark = -1;\n        for (let i = 0; i < reciverlist; i++) {\n            if (reciverlist[i] === callback) {\n                mark = i;\n                break;\n            }\n        }\n        if (mark !== -1) {\n            reciverlist.splice(mark, 1);\n        }\n    }\n    /**\n     * 给存在的事件发送通知\n     * @param event 事件名称\n     * @param props 需要传递给事件回调函数的参数\n     */\n    static send(event, ...props) {\n        const reciverlist = EventDriver.regtable[event];\n        if (reciverlist) {\n            for (const reciver of reciverlist) {\n                reciver(...props);\n            }\n        }\n    }\n}\nEventDriver.regtable = [];\n"]}