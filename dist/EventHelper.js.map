{"version":3,"sources":["EventHelper.js"],"names":["resolve","_ConsoleHelper","_interopRequireDefault","require","_EventDriver","__awaiter","thisArg","_arguments","P","generator","Promise","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","call","pop","length","push","EventHelper","exec","message","errorText","ConsoleHelper","target","name","descriptor","original","args","_i","arguments","e_1","_a","errorType","ErrorType","unknown","success","known","error","EventDriver","send","errorMessage","execLock","e_2","increaseLock","decreaseLock","execSubmit","successText","e_3","_lockCount","prototype","isLock"],"mappings":"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","file":"EventHelper.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { ErrorType } from \"./IUtilityTypes\";\nimport ConsoleHelper from \"./ConsoleHelper\";\nimport EventDriver from \"./EventDriver\";\n/**\n * 函数执行装饰器\n */\nvar EventHelper = /** @class */ (function () {\n    function EventHelper() {\n    }\n    /**\n     * 执行一段普通函数代码\n     *\n     * 使用：`@EventHelper.exec()`\n     */\n    EventHelper.exec = function (message, errorText) {\n        if (message === void 0) { message = ConsoleHelper; }\n        if (errorText === void 0) { errorText = \"数据获取失败,请联系系统管理员！\"; }\n        return function decorator(target, name, descriptor) {\n            var original = descriptor.value;\n            if (typeof original === \"function\") {\n                descriptor.value = function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    return __awaiter(this, void 0, void 0, function () {\n                        var result, e_1, errorType;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    _a.trys.push([0, 2, , 3]);\n                                    return [4 /*yield*/, original.apply(this, args)];\n                                case 1:\n                                    result = _a.sent();\n                                    return [2 /*return*/, result];\n                                case 2:\n                                    e_1 = _a.sent();\n                                    if (e_1) {\n                                        errorType = ErrorType.unknown;\n                                        errorText = e_1.message || errorText;\n                                        if (e_1.success === false) {\n                                            errorText = e_1.message;\n                                            errorType = ErrorType.known;\n                                            if (e_1.errorType) {\n                                                errorType = e_1.errorType;\n                                            }\n                                        }\n                                        message.error(errorText);\n                                        EventDriver.send(\"catchError\", {\n                                            errorText: errorText,\n                                            errorType: errorType,\n                                            errorMessage: e_1\n                                        });\n                                    }\n                                    throw e_1;\n                                case 3: return [2 /*return*/];\n                            }\n                        });\n                    });\n                };\n            }\n            return descriptor;\n        };\n    };\n    /**\n     * 执行一段普通函数代码，并对该函数加锁\n     *\n     * 使用：`@EventHelper.execLock()`\n     * @param errorText 出现错误时得提示信息文本\n     */\n    EventHelper.execLock = function (message, errorText) {\n        if (message === void 0) { message = ConsoleHelper; }\n        if (errorText === void 0) { errorText = \"未知错误\"; }\n        return function decorator(target, name, descriptor) {\n            var original = descriptor.value;\n            if (typeof original === \"function\") {\n                descriptor.value = function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    return __awaiter(this, void 0, void 0, function () {\n                        var result, e_2, errorType;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    _a.trys.push([0, 2, , 3]);\n                                    EventHelper.increaseLock();\n                                    return [4 /*yield*/, original.apply(this, args)];\n                                case 1:\n                                    result = _a.sent();\n                                    EventHelper.decreaseLock();\n                                    return [2 /*return*/, result];\n                                case 2:\n                                    e_2 = _a.sent();\n                                    EventHelper.decreaseLock();\n                                    if (e_2) {\n                                        errorType = ErrorType.unknown;\n                                        errorText = e_2.message || errorText;\n                                        if (e_2.success === false) {\n                                            errorText = e_2.message;\n                                            errorType = ErrorType.known;\n                                            if (e_2.errorType) {\n                                                errorType = e_2.errorType;\n                                            }\n                                        }\n                                        message.error(errorText);\n                                        EventDriver.send(\"catchError\", {\n                                            errorText: errorText,\n                                            errorType: errorType,\n                                            errorMessage: e_2\n                                        });\n                                    }\n                                    throw e_2;\n                                case 3: return [2 /*return*/];\n                            }\n                        });\n                    });\n                };\n            }\n            return descriptor;\n        };\n    };\n    /**\n     * 执行一段需要把数据提交到后端的函数代码，一般应用在点击提交按钮的场景中，例如：保存提货地址\n     *\n     * 多按钮状态设定, 通过监听 `lockSubmit` 事件，更新对应按钮状态\n     * @param successText 请求成功时得提示信息文本,为`null`时不显示提示信息\n     * @param errorText 出现错误时得提示信息文本\n     * @returns 声明函数需返回`bool类型`，返回`true`为显示提示信息，当`successText`为`null`时即时返回`true`也不会显示提示信息\n     */\n    EventHelper.execSubmit = function (message, successText, errorText) {\n        if (message === void 0) { message = ConsoleHelper; }\n        if (successText === void 0) { successText = \"保存成功\"; }\n        if (errorText === void 0) { errorText = \"未知错误\"; }\n        return function decorator(target, name, descriptor) {\n            var original = descriptor.value;\n            if (typeof original === \"function\") {\n                descriptor.value = function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i] = arguments[_i];\n                    }\n                    return __awaiter(this, void 0, void 0, function () {\n                        var result, e_3, errorType;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    _a.trys.push([0, 2, , 3]);\n                                    EventHelper.increaseLock();\n                                    return [4 /*yield*/, original.apply(this, args)];\n                                case 1:\n                                    result = _a.sent();\n                                    if (result && successText) {\n                                        message.success(successText, 2, function () {\n                                            EventHelper.decreaseLock();\n                                        });\n                                    }\n                                    else {\n                                        EventHelper.decreaseLock();\n                                    }\n                                    return [2 /*return*/, result];\n                                case 2:\n                                    e_3 = _a.sent();\n                                    EventHelper.decreaseLock();\n                                    if (e_3) {\n                                        errorType = ErrorType.unknown;\n                                        errorText = e_3.message || errorText;\n                                        if (e_3.success === false) {\n                                            errorText = e_3.message;\n                                            errorType = ErrorType.known;\n                                            if (e_3.errorType) {\n                                                errorType = e_3.errorType;\n                                            }\n                                        }\n                                        message.error(errorText);\n                                        EventDriver.send(\"catchError\", {\n                                            errorText: errorText,\n                                            errorType: errorType,\n                                            errorMessage: e_3\n                                        });\n                                    }\n                                    throw e_3;\n                                case 3: return [2 /*return*/];\n                            }\n                        });\n                    });\n                };\n            }\n            return descriptor;\n        };\n    };\n    /**\n     * 增加锁计数\n     */\n    EventHelper.increaseLock = function () {\n        EventHelper._lockCount++;\n    };\n    /**\n     * 减少锁计数\n     */\n    EventHelper.decreaseLock = function () {\n        if (EventHelper._lockCount > 0) {\n            EventHelper._lockCount--;\n        }\n    };\n    /**\n     * 当前缓存是否存在锁对象\n     * @returns\n     */\n    EventHelper.prototype.isLock = function () {\n        return EventHelper._lockCount !== 0;\n    };\n    EventHelper._lockCount = 0;\n    return EventHelper;\n}());\nexport default EventHelper;\n"]}