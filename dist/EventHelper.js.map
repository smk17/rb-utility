{"version":3,"sources":["EventHelper.js"],"names":["_IUtilityTypes","require","_index","_ConsoleHelper","_interopRequireDefault","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","EventHelper","_lockCount","message","arguments","length","undefined","ConsoleHelper","errorText","target","descriptor","original","_len","args","Array","_key","this","regeneratorRuntime","mark","_callee","errorType","wrap","_context","prev","sent","abrupt","t0","ErrorType","unknown","success","known","error","send","stop","name","_len2","_key2","_callee2","_context2","increaseLock","decreaseLock","EventDriver","errorMessage","successText","_len3","_key3","_callee3","_context3"],"mappings":"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","file":"EventHelper.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ErrorType } from \"./IUtilityTypes\";\nimport { EventDriver } from \"./index\";\nimport ConsoleHelper from \"./ConsoleHelper\";\n/**\n * 函数执行装饰器\n */\nexport default class EventHelper {\n    /**\n     * 执行一段普通函数代码\n     *\n     * 使用：`@EventHelper.exec()`\n     */\n    static exec(message = ConsoleHelper, errorText = \"数据获取失败,请联系系统管理员！\") {\n        return function decorator(target, name, descriptor) {\n            const original = descriptor.value;\n            if (typeof original === \"function\") {\n                descriptor.value = function (...args) {\n                    return __awaiter(this, void 0, void 0, function* () {\n                        try {\n                            const result = yield original.apply(this, args);\n                            return result;\n                        }\n                        catch (e) {\n                            if (e) {\n                                let errorType = ErrorType.unknown;\n                                errorText = e.message || errorText;\n                                if (e.success === false) {\n                                    errorText = e.message;\n                                    errorType = ErrorType.known;\n                                    if (e.errorType) {\n                                        errorType = e.errorType;\n                                    }\n                                }\n                                message.error(errorText);\n                                EventDriver.send(\"catchError\", {\n                                    errorText,\n                                    errorType,\n                                    errorMessage: e\n                                });\n                            }\n                            throw e;\n                        }\n                    });\n                };\n            }\n            return descriptor;\n        };\n    }\n    /**\n     * 执行一段普通函数代码，并对该函数加锁\n     *\n     * 使用：`@EventHelper.execLock()`\n     * @param errorText 出现错误时得提示信息文本\n     */\n    static execLock(message = ConsoleHelper, errorText = \"未知错误\") {\n        return function decorator(target, name, descriptor) {\n            const original = descriptor.value;\n            if (typeof original === \"function\") {\n                descriptor.value = function (...args) {\n                    return __awaiter(this, void 0, void 0, function* () {\n                        try {\n                            EventHelper.increaseLock();\n                            const result = yield original.apply(this, args);\n                            EventHelper.decreaseLock();\n                            return result;\n                        }\n                        catch (e) {\n                            EventHelper.decreaseLock();\n                            if (e) {\n                                let errorType = ErrorType.unknown;\n                                errorText = e.message || errorText;\n                                if (e.success === false) {\n                                    errorText = e.message;\n                                    errorType = ErrorType.known;\n                                    if (e.errorType) {\n                                        errorType = e.errorType;\n                                    }\n                                }\n                                message.error(errorText);\n                                EventDriver.send(\"catchError\", {\n                                    errorText,\n                                    errorType,\n                                    errorMessage: e\n                                });\n                            }\n                            throw e;\n                        }\n                    });\n                };\n            }\n            return descriptor;\n        };\n    }\n    /**\n     * 执行一段需要把数据提交到后端的函数代码，一般应用在点击提交按钮的场景中，例如：保存提货地址\n     *\n     * 多按钮状态设定, 通过监听 `lockSubmit` 事件，更新对应按钮状态\n     * @param successText 请求成功时得提示信息文本,为`null`时不显示提示信息\n     * @param errorText 出现错误时得提示信息文本\n     * @returns 声明函数需返回`bool类型`，返回`true`为显示提示信息，当`successText`为`null`时即时返回`true`也不会显示提示信息\n     */\n    static execSubmit(message = ConsoleHelper, successText = \"保存成功\", errorText = \"未知错误\") {\n        return function decorator(target, name, descriptor) {\n            const original = descriptor.value;\n            if (typeof original === \"function\") {\n                descriptor.value = function (...args) {\n                    return __awaiter(this, void 0, void 0, function* () {\n                        try {\n                            EventHelper.increaseLock();\n                            const result = yield original.apply(this, args);\n                            if (result && successText) {\n                                message.success(successText, 2, () => {\n                                    EventHelper.decreaseLock();\n                                });\n                            }\n                            else {\n                                EventHelper.decreaseLock();\n                            }\n                            return result;\n                        }\n                        catch (e) {\n                            EventHelper.decreaseLock();\n                            if (e) {\n                                let errorType = ErrorType.unknown;\n                                errorText = e.message || errorText;\n                                if (e.success === false) {\n                                    errorText = e.message;\n                                    errorType = ErrorType.known;\n                                    if (e.errorType) {\n                                        errorType = e.errorType;\n                                    }\n                                }\n                                message.error(errorText);\n                                EventDriver.send(\"catchError\", {\n                                    errorText,\n                                    errorType,\n                                    errorMessage: e\n                                });\n                            }\n                            throw e;\n                        }\n                    });\n                };\n            }\n            return descriptor;\n        };\n    }\n    /**\n     * 增加锁计数\n     */\n    static increaseLock() {\n        EventHelper._lockCount++;\n    }\n    /**\n     * 减少锁计数\n     */\n    static decreaseLock() {\n        if (EventHelper._lockCount > 0) {\n            EventHelper._lockCount--;\n        }\n    }\n    /**\n     * 当前缓存是否存在锁对象\n     * @returns\n     */\n    isLock() {\n        return EventHelper._lockCount !== 0;\n    }\n}\nEventHelper._lockCount = 0;\n"]}