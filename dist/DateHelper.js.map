{"version":3,"sources":["DateHelper.js"],"names":["_IUtilityTypes","require","_NumberHelper","_interopRequireDefault","_ErrorHelper","DateHelper","d","check","getDate","setTime","value","m","match","_isoDateFormatExp","_isoDateFormatExp2","Date","parseInt","_isoDateFormatExp3","_isoDateFormatExp4","_isoDateFormatExp5","num","date","setUTCFullYear","setUTCHours","Number","offset","setMonth","setDate","_fixDate","setHours","setMinutes","setSeconds","setMilliseconds","getTime","_dateFormatExp","_dateFormatExp2","_dateFormatExp3","parseISO8601","format","arguments","length","undefined","_typeof","parse","getFullYear","toString","strMonth","strHours","strMinutes","strMilliseconds","year","month","getMonth","day","strDay","getHours","getMinutes","newDate","getSeconds","replace","timeStr","time","now","gap","Math","ceil","leftDate","left","rightDate","right","argumentNull","datepart","DatePartEnum","week","interval","hour","minute","NumberHelper","ErrorHelper","second"],"mappings":"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","file":"DateHelper.js","sourcesContent":["import { DatePartEnum } from \"./IUtilityTypes\";\nimport NumberHelper from \"./NumberHelper\";\nimport ErrorHelper from \"./ErrorHelper\";\n/**\n * 日期帮助类\n */\nexport default class DateHelper {\n    static _fixDate(d, check) {\n        if (+d) {\n            while (d.getDate() !== check.getDate()) {\n                d.setTime(+d + (d < check ? 1 : -1) * 3600000);\n            }\n        }\n    }\n    static parseISO8601(value) {\n        let m = value.match(DateHelper._isoDateFormatExp);\n        if (!m) {\n            m = value.match(DateHelper._isoDateFormatExp2);\n            if (m) {\n                return new Date(parseInt(m[1], 10), parseInt(m[2], 10) - 1, parseInt(m[3], 10), parseInt(m[4], 10));\n            }\n            m = value.match(DateHelper._isoDateFormatExp3);\n            if (m) {\n                return new Date(parseInt(m[1], 10), parseInt(m[2], 10) - 1);\n            }\n            m = value.match(DateHelper._isoDateFormatExp4);\n            if (m) {\n                return new Date(parseInt(m[1], 10), parseInt(m[2], 10) - 1, parseInt(m[3], 10));\n            }\n            m = value.match(DateHelper._isoDateFormatExp5);\n            if (!m)\n                return null;\n            else {\n                return new Date(parseInt(m[3], 10), parseInt(m[1], 10) - 1, parseInt(m[2], 10));\n            }\n        }\n        let num = parseInt(m[1], 10);\n        let date = new Date(num, 0, 1);\n        if (!m[14]) {\n            let check = new Date(num, 0, 1, 9, 0);\n            if (m[3]) {\n                num = parseInt(m[3], 10);\n                date.setMonth(num - 1);\n                check.setMonth(num - 1);\n            }\n            if (m[5]) {\n                num = parseInt(m[5], 10);\n                date.setDate(num);\n                check.setDate(num);\n            }\n            DateHelper._fixDate(date, check);\n            if (m[7]) {\n                date.setHours(parseInt(m[7], 10));\n            }\n            if (m[8]) {\n                date.setMinutes(parseInt(m[8], 10));\n            }\n            if (m[10]) {\n                date.setSeconds(parseInt(m[10], 10));\n            }\n            if (m[12]) {\n                date.setMilliseconds(Number(\"0.\" + m[12]) * 1000);\n            }\n            DateHelper._fixDate(date, check);\n        }\n        else {\n            num = parseInt(m[3], 10);\n            date.setUTCFullYear(parseInt(m[1], 10), num ? num - 1 : 0, parseInt(m[5], 10) || 1);\n            date.setUTCHours(parseInt(m[7], 10) || 0, parseInt(m[8], 10) || 0, parseInt(m[10], 10) || 0, parseInt(m[12], 10) ? Number(\"0.\" + m[12]) * 1000 : 0);\n            num = parseInt(m[18], 10);\n            let offset = parseInt(m[16], 10) * 60 + (num ? num : 0);\n            offset *= m[15] === \"-\" ? 1 : -1;\n            date = new Date(+date + offset * 60 * 1000);\n        }\n        return date;\n    }\n    /**\n     * 将一个日期字符串转换成一个日期对象\n     * @param value 受支持的日期字符串，格式为：yyyy-MM-dd HH:mm:ss\n     * @returns 一个日期对象\n     */\n    static parse(value) {\n        if (!value) {\n            return null;\n        }\n        let d;\n        switch (typeof value) {\n            case \"number\":\n                d = new Date(Number(value) * 1000);\n                if (d.getTime() !== value) {\n                    return null;\n                }\n                return d;\n            case \"string\":\n                let m = value.match(DateHelper._dateFormatExp);\n                if (m) {\n                    let date = new Date(parseInt(m[1], 10), parseInt(m[2], 10) - 1, parseInt(m[3], 0));\n                    return date;\n                }\n                m = value.match(DateHelper._dateFormatExp2);\n                if (m) {\n                    let date = new Date(parseInt(m[1], 10), parseInt(m[2], 10) - 1);\n                    return date;\n                }\n                if (value.match(DateHelper._dateFormatExp3)) {\n                    let num = parseInt(value, 10);\n                    d = new Date(num * 1000);\n                    if (d.getTime() !== num) {\n                        return null;\n                    }\n                    return d;\n                }\n                return (DateHelper.parseISO8601(value) || (value ? new Date(value) : null));\n            default:\n                if (value.getFullYear) {\n                    return value;\n                }\n                return null;\n        }\n    }\n    /**\n     * 格式化日期对象\n     * @param date 日期对象\n     * @param format 格式\n     * @returns 返回格式化后的字符串\n     */\n    static format(date, format = \"yyyy-MM-dd\") {\n        if (!date) {\n            return \"\";\n        }\n        switch (typeof date) {\n            case \"string\":\n                date = DateHelper.parse(date);\n                break;\n            case \"number\":\n                let newDate = new Date(Number(date) * 1000);\n                if (newDate.getTime() !== Number(date)) {\n                    return \"\";\n                }\n                break;\n            case \"object\":\n                if (!date.getFullYear) {\n                    return date.toString();\n                }\n                break;\n            default:\n                return date;\n        }\n        let year = date.getFullYear();\n        let month = date.getMonth();\n        let day = date.getDate();\n        let strMonth, strDay, strHours, strMinutes, strMilliseconds;\n        switch (format) {\n            case \"yyyy-MM-dd\":\n            case \"yyyy-mm-dd\":\n                strMonth = (month + 1).toString();\n                if (strMonth.length === 1) {\n                    strMonth = \"0\" + strMonth;\n                }\n                strDay = day.toString();\n                if (strDay.length === 1) {\n                    strDay = \"0\" + strDay;\n                }\n                return year + \"-\" + strMonth + \"-\" + strDay;\n            case \"MM-dd\":\n            case \"mm-dd\":\n                strMonth = (month + 1).toString();\n                if (strMonth.length === 1) {\n                    strMonth = \"0\" + strMonth;\n                }\n                strDay = day.toString();\n                if (strDay.length === 1) {\n                    strDay = \"0\" + strDay;\n                }\n                return strMonth + \"-\" + strDay;\n            case \"yyyy-MM-dd HH:mm\":\n            case \"yyyy-mm-dd hh:ii\":\n                strMonth = (month + 1).toString();\n                if (strMonth.length === 1) {\n                    strMonth = \"0\" + strMonth;\n                }\n                strDay = day.toString();\n                if (strDay.length === 1) {\n                    strDay = \"0\" + strDay;\n                }\n                strHours = date.getHours().toString();\n                if (strHours.length === 1) {\n                    strHours = \"0\" + strHours;\n                }\n                strMinutes = date.getMinutes().toString();\n                if (strMinutes.length === 1) {\n                    strMinutes = \"0\" + strMinutes;\n                }\n                return year + \"-\" + strMonth + \"-\" + strDay + \" \" + strHours + \":\" + strMinutes;\n            case \"yyyy-MM\":\n            case \"yyyy-mm\":\n                strMonth = (month + 1).toString();\n                if (strMonth.length === 1) {\n                    strMonth = \"0\" + strMonth;\n                }\n                return year + \"-\" + strMonth;\n            case \"yyyy\":\n                return year.toString();\n            case \"HH:mm:ss\":\n            case \"hh:ii:ss\":\n                strHours = date.getHours().toString();\n                if (strHours.length === 1) {\n                    strHours = \"0\" + strHours;\n                }\n                strMinutes = date.getMinutes().toString();\n                if (strMinutes.length === 1) {\n                    strMinutes = \"0\" + strMinutes;\n                }\n                strMilliseconds = date.getSeconds().toString();\n                if (strMilliseconds.length === 1) {\n                    strMilliseconds = \"0\" + strMilliseconds;\n                }\n                return strHours + \":\" + strMinutes + \":\" + strMilliseconds;\n            case \"MM-dd HH:mm:ss\":\n            case \"mm-dd hh:ii:ss\":\n                strMonth = (month + 1).toString();\n                if (strMonth.length === 1) {\n                    strMonth = \"0\" + strMonth;\n                }\n                strDay = day.toString();\n                if (strDay.length === 1) {\n                    strDay = \"0\" + strDay;\n                }\n                strHours = date.getHours().toString();\n                if (strHours.length === 1) {\n                    strHours = \"0\" + strHours;\n                }\n                strMinutes = date.getMinutes().toString();\n                if (strMinutes.length === 1) {\n                    strMinutes = \"0\" + strMinutes;\n                }\n                strMilliseconds = date.getSeconds().toString();\n                if (strMilliseconds.length === 1) {\n                    strMilliseconds = \"0\" + strMilliseconds;\n                }\n                return strMonth + \"-\" + strDay + \" \" + strHours + \":\" + strMinutes + \":\" + strMilliseconds;\n            case \"yyyy-MM-dd HH:mm:ss\":\n            case \"yyyy-mm-dd hh:ii:ss\":\n                strMonth = (month + 1).toString();\n                if (strMonth.length === 1) {\n                    strMonth = \"0\" + strMonth;\n                }\n                strDay = day.toString();\n                if (strDay.length === 1) {\n                    strDay = \"0\" + strDay;\n                }\n                strHours = date.getHours().toString();\n                if (strHours.length === 1) {\n                    strHours = \"0\" + strHours;\n                }\n                strMinutes = date.getMinutes().toString();\n                if (strMinutes.length === 1) {\n                    strMinutes = \"0\" + strMinutes;\n                }\n                strMilliseconds = date.getSeconds().toString();\n                if (strMilliseconds.length === 1) {\n                    strMilliseconds = \"0\" + strMilliseconds;\n                }\n                return (year +\n                    \"-\" +\n                    strMonth +\n                    \"-\" +\n                    strDay +\n                    \" \" +\n                    strHours +\n                    \":\" +\n                    strMinutes +\n                    \":\" +\n                    strMilliseconds);\n            case \"yyyy/MM/dd HH:mm:ss\":\n            case \"yyyy/mm/dd hh:ii:ss\":\n                strMonth = (month + 1).toString();\n                if (strMonth.length === 1) {\n                    strMonth = \"0\" + strMonth;\n                }\n                strDay = day.toString();\n                if (strDay.length === 1) {\n                    strDay = \"0\" + strDay;\n                }\n                strHours = date.getHours().toString();\n                if (strHours.length === 1) {\n                    strHours = \"0\" + strHours;\n                }\n                strMinutes = date.getMinutes().toString();\n                if (strMinutes.length === 1) {\n                    strMinutes = \"0\" + strMinutes;\n                }\n                strMilliseconds = date.getSeconds().toString();\n                if (strMilliseconds.length === 1) {\n                    strMilliseconds = \"0\" + strMilliseconds;\n                }\n                return (year +\n                    \"/\" +\n                    strMonth +\n                    \"/\" +\n                    strDay +\n                    \" \" +\n                    strHours +\n                    \":\" +\n                    strMinutes +\n                    \":\" +\n                    strMilliseconds);\n            case \"MM/dd HH:mm\":\n            case \"mm/dd hh:ii\":\n                strMonth = (month + 1).toString();\n                if (strMonth.length === 1) {\n                    strMonth = \"0\" + strMonth;\n                }\n                strDay = day.toString();\n                if (strDay.length === 1) {\n                    strDay = \"0\" + strDay;\n                }\n                strHours = date.getHours().toString();\n                if (strHours.length === 1) {\n                    strHours = \"0\" + strHours;\n                }\n                strMinutes = date.getMinutes().toString();\n                if (strMinutes.length === 1) {\n                    strMinutes = \"0\" + strMinutes;\n                }\n                strMilliseconds = date.getSeconds().toString();\n                if (strMilliseconds.length === 1) {\n                    strMilliseconds = \"0\" + strMilliseconds;\n                }\n                return strMonth + \"/\" + strDay + \" \" + strHours + \":\" + strMinutes;\n        }\n        return \"\";\n    }\n    /**\n     * 格式化日期对象，判断是否是今年，返回对应字符串\n     */\n    static formatDate(value) {\n        if (!value)\n            return value;\n        value = value.toString();\n        value = value.replace(/-/g, \"/\");\n        const now = new Date();\n        let time = new Date(value);\n        let timeStr = DateHelper.format(time, \"MM-dd\");\n        if (time.getFullYear() !== now.getFullYear()) {\n            timeStr = DateHelper.format(time, \"yyyy-MM-dd\");\n        }\n        return timeStr;\n    }\n    static formatDateTime(value) {\n        if (!value)\n            return value;\n        value = value.toString();\n        value = value.replace(/-/g, \"/\");\n        const now = new Date();\n        let time = new Date(value);\n        const gap = Number(now) - Number(time);\n        let timeStr = \"刚刚\";\n        if (gap < 60 * 1000) {\n            timeStr = \"刚刚\";\n        }\n        else if (60 * 1000 <= gap && gap < 60 * 60 * 1000) {\n            timeStr = Math.ceil(gap / (60 * 1000)) + \"分钟前\";\n        }\n        else if (60 * 60 * 1000 <= gap && gap < 24 * 60 * 60 * 1000) {\n            timeStr = Math.ceil(gap / (60 * 60 * 1000)) + \"小时前\";\n        }\n        else if (time.getFullYear() < now.getFullYear()) {\n            timeStr = DateHelper.format(time, \"yyyy-MM-dd HH:mm:ss\");\n        }\n        else if (time.getDate() === now.getDate() && time.getMonth() === now.getMonth()) {\n            timeStr = DateHelper.format(time, \"HH:mm:ss\");\n        }\n        else {\n            timeStr = DateHelper.format(time, \"MM-dd HH:mm:ss\");\n        }\n        return timeStr;\n    }\n    /**\n     * 计算两个日期之间的间隔\n     * @param left 左值\n     * @param right 右值\n     * @param datepart 计算类型\n     * @returns 返回间隔数\n     */\n    static diff(left, right, datepart) {\n        let leftDate = DateHelper.parse(left), rightDate = DateHelper.parse(right);\n        if (!leftDate) {\n            throw ErrorHelper.argumentNull(\"left\", \"参数值必须是一个日期对象或者是一个可以转换成日期对象的数值或字符串。\");\n        }\n        if (!rightDate) {\n            throw ErrorHelper.argumentNull(\"right\", \"参数值必须是一个日期对象或者是一个可以转换成日期对象的数值或字符串。\");\n        }\n        switch (datepart) {\n            case DatePartEnum.year:\n                return rightDate.getFullYear() - leftDate.getFullYear();\n            case DatePartEnum.month:\n                return ((rightDate.getFullYear() - leftDate.getFullYear()) * 12 +\n                    rightDate.getMonth() -\n                    leftDate.getMonth());\n            default: {\n                let interval = (rightDate.getTime() - leftDate.getTime()) / 1000; // 相差秒\n                switch (datepart) {\n                    case DatePartEnum.week:\n                        interval = interval / 60 / 60 / 24 / 7;\n                        break;\n                    case DatePartEnum.day:\n                        interval = interval / 60 / 60 / 24;\n                        break;\n                    case DatePartEnum.hour:\n                        interval = interval / 60 / 60;\n                        break;\n                    case DatePartEnum.minute:\n                        interval = interval / 60;\n                        break;\n                }\n                return NumberHelper.unround(interval);\n            }\n        }\n    }\n    /**\n     * 在日期中添加或减去指定的时间间隔\n     * @param date 要进行处理的日期对象或可以转换成日期的字符串\n     * @param datepart 计算类型\n     * @param interval 间隔\n     * @returns 返回日期对象\n     */\n    static add(value, datepart, interval) {\n        let date = DateHelper.parse(value);\n        if (!date) {\n            throw ErrorHelper.argumentNull(\"left\", \"参数值必须是一个日期对象或者是一个可以转换成日期对象的数值或字符串。\");\n        }\n        switch (datepart) {\n            case DatePartEnum.year:\n                return new Date(date.getFullYear() + interval, date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());\n            case DatePartEnum.month:\n                return new Date(date.getFullYear(), date.getMonth() + interval, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());\n            case DatePartEnum.day:\n                return new Date(date.getTime() + 86400000 * interval);\n            case DatePartEnum.week:\n                return new Date(date.getTime() + 604800000 * interval);\n            case DatePartEnum.hour:\n                return new Date(date.getTime() + 3600000 * interval);\n            case DatePartEnum.minute:\n                return new Date(date.getTime() + 60000 * interval);\n            case DatePartEnum.second:\n                return new Date(date.getTime() + 1000 * interval);\n        }\n        return null;\n    }\n}\nDateHelper._dateFormatExp = /^([0-9]{4})([0-9]{2})([0-9]{2})$/;\nDateHelper._dateFormatExp2 = /^([0-9]{4}).([0-9]*)$/;\nDateHelper._dateFormatExp3 = /^\\d+(\\.\\d+)?$/;\nDateHelper._isoDateFormatExp = /^([0-9]{4})([-\\/]([0-9]{1,2})([-\\/]([0-9]{1,2})([T ]([0-9]{1,2}):([0-9]{1,2})(:([0-9]{1,2})(\\.([0-9]+))?)?(Z|(([-+])([0-9]{2})(:?([0-9]{2}))?))?)?)?)?$/;\nDateHelper._isoDateFormatExp2 = /^([0-9]{4})[-\\/]([0-9]{2})[-\\/]([0-9]{2})[T ]([0-9]{1,2})/;\nDateHelper._isoDateFormatExp3 = /^([0-9]{4}).([0-9]*)/;\nDateHelper._isoDateFormatExp4 = /^([0-9]{4}).([0-9]*).([0-9]*)/;\nDateHelper._isoDateFormatExp5 = /^([0-9]{2})-([0-9]{2})-([0-9]{4})$/;\n"]}