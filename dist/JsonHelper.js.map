{"version":3,"sources":["JsonHelper.js"],"names":["JsonHelper","data","toJSON","JSON","stringify","error","console","log","json","value","toJson","paramValues","hasOwnProperty","key"],"mappings":"qeAIqBA,oHAMHC,GACV,GAAIA,MAAAA,EACA,MAAO,OAEX,GAAIA,EAAKC,OACL,OAAOD,EAAKC,SAXHF,IAcT,OAAOG,KAAKC,UAAUH,GAE1B,MAAOI,GAEH,OADAC,QAAQC,IAAIF,GACL,sCAQEG,GACb,GAAIA,GAAiB,SAATA,GAA4B,cAATA,EAC3B,IArBI,OAAJL,KAAiBF,MAAIO,GAExB,MAAAH,GACQH,OAsBDI,QAAQD,MAAMA,EAAOG,GAtBZ,GA0BjB,OAAO,gDAjBNC,GACJ,MAAA,iBAAAA,EACDA,EAyBWT,EAAWU,OAAOD,sDApBNE,GAId,IACDF,EAJJ,GAAID,EAKIF,IAAAA,IAAQD,KAAMA,EACdM,EAAAC,eAAAC,KAEPJ,OADIA,EAAAE,EAAAE,WA2BcF,EAAYE,GAxBlC,iBAAAJ,IACDE,EAAAE,GAAAb,EAAAU,OAAAD","file":"JsonHelper.js","sourcesContent":["/**\n * Json辅助工具\n * @returns\n */\nexport default class JsonHelper {\n    /**\n     * 将对象序列化成json字符串\n     * @param {any} data 需要进行序列化的对象\n     * @returns 返回序列化后的json字符串\n     */\n    static toJson(data) {\n        if (data === null || data === undefined) {\n            return \"null\";\n        }\n        if (data.toJSON) {\n            return data.toJSON();\n        }\n        try {\n            return JSON.stringify(data);\n        }\n        catch (error) {\n            console.log(error);\n            return \"\";\n        }\n    }\n    /**\n     * 将json字符串反序列化成对象\n     * @param {string} json json字符串\n     * @returns 返回对应的对象\n     */\n    static parseJson(json) {\n        if (json && json !== \"null\" && json !== \"undefined\") {\n            try {\n                return JSON.parse(json);\n            }\n            catch (error) {\n                console.error(error, json);\n                return {};\n            }\n        }\n        return null;\n    }\n    /**\n     * 将参数值转换到字符串形式\n     * @param value 参数的原始值\n     */\n    static paramValueToString(value) {\n        if (typeof value === \"string\") {\n            return value;\n        }\n        return JsonHelper.toJson(value);\n    }\n    /**\n     * 将参数值转换到字符串形式\n     * @param value 参数的原始值\n     */\n    static paramsValueConvertToString(paramValues) {\n        if (!paramValues) {\n            return;\n        }\n        let value;\n        for (const key in paramValues) {\n            if (paramValues.hasOwnProperty(key)) {\n                value = paramValues[key];\n                if (value === null || value === undefined) {\n                    delete paramValues[key];\n                }\n                else if (typeof value !== \"string\") {\n                    paramValues[key] = JsonHelper.toJson(value);\n                }\n            }\n        }\n    }\n}\n"]}