{"version":3,"sources":["TypeHelper.js"],"names":["TypeHelper","isNumber","obj","isArray","Object","prototype","toString","call","isInteger","isBoolean","isFunction","isDate","constructor","Date","isError","Error","isType","type","_typeof","Function","String","Number","Symbol","isDomElement","val","undefined","nodeType","doc","ownerDocument","document","defaultView","parentWindow","body","clone","result","na","hasOwnProperty"],"mappings":"4UAGA,IAAIA,WAA4B,WAC5B,SAASA,KAuGD,OAhGRA,EAAWC,SAAW,SAAUC,GARhCF,MAAU,iBAAAE,GAgBVF,EAAWG,QAAU,SAAUD,GAC3B,MAA+C,mBAAxCE,OAAOC,UAAUC,SAASC,KAAKL,IAO1CF,EAAWQ,UAAY,SAAUN,GAC7B,MAAsB,iBAARA,GAAoBA,EAAM,GAAM,GATlDF,EAAAS,UAAA,SAAAP,GAGA,MAAA,kBAAAA,GAKAF,EAAWQ,SAAY,SAAUN,GAC7B,MAAsB,iBAAfA,GAuBXF,EAAWU,WAAa,SAAUR,GAC9B,MAAsB,mBAARA,GAOlBF,EAAWW,OAAS,SAAUT,GAC1B,OAAOA,GAAOA,EAAIU,cAAgBC,MAOtCb,EAAWc,QAAU,SAAUZ,GAC3B,OAAOA,GAAOA,EAAIU,cAAgBG,OAdtCf,EAAAgB,OAAA,SAAAd,EAAAe,GAuBI,GAAIf,MAAAA,EACA,OAAO,EAEX,OAAAgB,QAAehB,IACX,IAAK,WACD,OAAOe,IAASE,SAvBlB,IAACR,UACG,OAAQC,IAAAA,QADtB,IAAA,SAGA,OAAAK,IAAAG,OAyBQ,IAAK,SACD,OAAOH,IAASI,OACpB,IAAK,SACD,OAAOJ,IAASK,OACpB,QACI,OAAOpB,aAAee,IAQlCjB,EAAWuB,aAAe,SAAUrB,GAChC,IAAKA,EACD,OAAO,EA1BfF,IAAUwB,GAACR,EACHd,GAAwBuB,iBAAhBvB,EAARwB,SAAmC,CACnC,IAAOC,EAAPzB,EAAA0B,eAAA1B,EAAA2B,UAAA3B,EACH,GAAAyB,IAAAzB,EACDsB,GA4BgBG,EAAIG,aAAeH,EAAII,gBA5BvC7B,OAgCQsB,GAAOG,EAAIK,OAAShC,EAAWuB,aAAaI,EAAIK,MAGxD,OAAQR,GAMZxB,EAAWiC,MAAQ,SAAU/B,GAhCrB,GAAKA,EAAA,CACD,GAAOe,EAAIgB,MAkCX,OAAO/B,EAAI+B,QAhCX,OAAAf,QAAUhB,IAZlB,IAAA,SAJJ,IAAA,SAmBA,IAAA,UAmCY,IAAK,WACL,IAAK,SACD,OAAOA,EACX,QACI,IAAIgC,EAAS,GAAIC,OAAK,EACtB,IAAKA,KAAMjC,EAnCDA,EAAAkC,eAAeD,KAC3BD,EAAAC,GAAAnC,EAAAiC,MAAA/B,EAAAiC,KAuCE,OAAOD,GAlCf,OAAOhC,GACHyB,EAxGgB,YA0GT3B","file":"TypeHelper.js","sourcesContent":["/**\n * 类型辅助工具\n */\nvar TypeHelper = /** @class */ (function () {\n    function TypeHelper() {\n    }\n    /**\n     * 判断指定的值是否为数值型对象\n     * @param obj 进行判断的值对象\n     * @returns 如果是数值型，返回true；否则返回false。\n     */\n    TypeHelper.isNumber = function (obj) {\n        return typeof obj === \"number\";\n    };\n    /**\n     * 判断指定的值是否为数值型对象\n     * @param obj 进行判断的值对象\n     * @returns 如果是数值型，返回true；否则返回false。\n     */\n    TypeHelper.isArray = function (obj) {\n        return Object.prototype.toString.call(obj) === \"[object Array]\";\n    };\n    /**\n     * 判断指定变量是否为整型型\n     * @param obj 进行判断的值对象\n     * @returns 如果是整数型，返回true；否则返回false。\n     */\n    TypeHelper.isInteger = function (obj) {\n        return typeof obj === \"number\" && obj % 1 === 0;\n    };\n    /**\n     * 判断指定变量是否为布尔型\n     * @param obj 进行判断的变量\n     * @returns 如果是布尔型，返回true；否则返回false。\n     */\n    TypeHelper.isBoolean = function (obj) {\n        return typeof obj === \"boolean\";\n    };\n    /**\n     * 判断指定的值是否为字符串对象\n     * @param obj 进行判断的值对象\n     * @returns 如果是字符串型，返回true；否则返回false。\n     */\n    TypeHelper.isString = function (obj) {\n        return typeof obj === \"string\";\n    };\n    /**\n     * 判断指定变量是否为函数或自定义类型\n     * @param obj 进行判断的变量\n     * @returns 如果是函数，返回true；否则返回false。\n     */\n    TypeHelper.isFunction = function (obj) {\n        return typeof obj === \"function\";\n    };\n    /**\n     * 判断指定变量是否为日期类型\n     * @param obj 进行判断的值对象\n     * @returns 如果是日期型，返回true；否则返回false。\n     */\n    TypeHelper.isDate = function (obj) {\n        return obj && obj.constructor === Date;\n    };\n    /**\n     * 判断当前指定变量是否为Error类型\n     * @param obj 进行判断的值对象\n     * @returns 如果是Error，返回true；否则返回false。\n     */\n    TypeHelper.isError = function (obj) {\n        return obj && obj.constructor === Error;\n    };\n    /**\n     * 判断指定的对象是否由指定的类型构造\n     * @param obj\n     * @param type\n     * @returns 如果是从指定类型构造，返回true；否则返回false。\n     */\n    TypeHelper.isType = function (obj, type) {\n        if (obj === null || obj === undefined) {\n            return true;\n        }\n        switch (typeof obj) {\n            case \"function\":\n                return type === Function;\n            case \"boolean\":\n                return type === Boolean;\n            case \"string\":\n                return type === String;\n            case \"number\":\n                return type === Number;\n            case \"symbol\":\n                return type === Symbol;\n            default:\n                return obj instanceof type;\n        }\n    };\n    /**\n     * 判断指定的对象是否为文档元素\n     * @param obj 进行判断的值对象\n     * @returns 如果是Dom对象，返回true；否则返回false。\n     */\n    TypeHelper.isDomElement = function (obj) {\n        if (!obj) {\n            return false;\n        }\n        var val = false;\n        if (typeof obj.nodeType !== \"number\") {\n            var doc = obj.ownerDocument || obj.document || obj;\n            if (doc !== obj) {\n                var w = doc.defaultView || doc.parentWindow;\n                val = w !== obj;\n            }\n            else {\n                val = !doc.body || !TypeHelper.isDomElement(doc.body);\n            }\n        }\n        return !val;\n    };\n    /**\n     * 深度克隆\n     * @param obj\n     */\n    TypeHelper.clone = function (obj) {\n        if (obj) {\n            if (obj.clone) {\n                return obj.clone();\n            }\n            switch (typeof obj) {\n                case \"number\":\n                case \"string\":\n                case \"boolean\":\n                case \"function\":\n                case \"symbol\":\n                    return obj;\n                default: {\n                    var result = {}, na = void 0;\n                    for (na in obj) {\n                        if (obj.hasOwnProperty(na)) {\n                            result[na] = TypeHelper.clone(obj[na]);\n                        }\n                    }\n                    return result;\n                }\n            }\n        }\n        return obj;\n    };\n    return TypeHelper;\n}());\nexport default TypeHelper;\n"]}