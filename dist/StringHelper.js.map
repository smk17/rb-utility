{"version":3,"sources":["StringHelper.js"],"names":["_ErrorHelper","_interopRequireDefault","require","StringHelper","__format","format","args","open","close","argNumber","arg","i","result","l","length","arguments","indexOf","slice","charAt","ErrorHelper","argument","substring","parseInt","toString","_i"],"mappings":"2FAAA,IAAAA,aAAAC,uBAAAC,QAAA,0FAIA,IAAIC,aAA8B,WAC9B,SAASA,KAqET,OA1EJA,EAAAC,SAAA,SAAAC,EAAAC,GAQQ,IAA2CC,EAAMC,EAAOC,EAAWC,EAA/DC,EAAI,EAAGC,EAAS,GAAIC,EAAIR,EAAOS,OACnC,GAAyB,IAArBC,UAAUD,OACV,OAAOT,EAEX,KAAOM,EAAIE,GARA,GASPN,EAAOF,EAAOW,QAAQ,IAAKL,GATnCR,EAAYE,EAAAW,QAAA,IAAAL,GAAGJ,EAAA,EAAA,CAA2B,GAAAC,EAAA,EAAA,CACjCL,GACRE,EAAAY,MAAAN,GAYe,MAVZ,GAAA,MAAAN,EAAAa,OAAAV,EAAA,GAAA,MAAAW,aAAAA,QAAAC,SAAA,SAAA,wBAAAR,GAAAP,EAAAgB,UAAAV,EAAAH,EAAA,GAAAG,EAAAH,EAAA,OAmBI,GAAgC,MAA5BH,EAAOa,OAAOX,EAAO,GAAzB,CAfI,GAARC,EAAc,EACHH,MAAOW,aAAAA,QAAPI,SAAP,SAAA,wBAsBA,GAAWZ,EAAPD,EAAJ,CApBQ,GAAM,MAAAF,EAAAa,OAAAV,EAAA,GACE,MAAGW,aAAAA,QAAAC,SAAA,SAAA,wBAEXR,GAAAP,EAAAgB,UAAAV,EAAAH,EAAA,GACHG,EAAAH,EAAA,MAgBL,CAdQ,GAAMW,EAAAA,IAAAA,EACT,MAAAA,aAAAA,QAAAC,SAAA,SAAA,wBAEGZ,GADJI,EAAgBU,SAACD,EAAab,UAA9BD,EAAA,EAAAC,GAAA,IACIA,MAAJC,GACA,MAAAU,aAAAA,QAAAC,SAAA,SAAA,4BAyBOT,EAAPJ,IAvBMK,GAAQL,EAAdc,UAAiCV,EAAAJ,IAGjCG,OADIH,EAAID,EAARG,MAEHG,GAAAF,EAAAa,YACGf,EAAKA,EAAM,QAvBfO,GAAAV,EAAwBgB,UAAAV,EAAAJ,EAAA,GACjBF,EAAPE,EAAA,EAwBC,OAAAK,GAMGD,EAASN,OAAT,SAAAA,GAEH,IADG,IAAAC,EAAA,GACHkB,EAAA,EAAAA,EAAAT,UAAAD,OAAAU,IA4BDlB,EAAKkB,EAAK,GAAKT,UAAUS,GA1BrB,OAAML,EAAAA,SAAYC,EAASd,IA8BhCH,EAtEuB,YAwEnBA","file":"StringHelper.js","sourcesContent":["import ErrorHelper from \"./ErrorHelper\";\n/**\n * 字符串帮助对象\n */\nvar StringHelper = /** @class */ (function () {\n    function StringHelper() {\n    }\n    StringHelper.__format = function (format, args) {\n        var i = 0, result = \"\", l = format.length, open, close, argNumber, arg;\n        if (arguments.length === 1) {\n            return format;\n        }\n        while (i < l) {\n            open = format.indexOf(\"{\", i);\n            close = format.indexOf(\"}\", i);\n            if (open < 0) {\n                if (close < 0) {\n                    result += format.slice(i);\n                    break;\n                }\n                if (format.charAt(close + 1) !== \"}\") {\n                    throw ErrorHelper.argument(\"format\", \"字符串格式存在孤立的'{'或'}'符号。\");\n                }\n                result += format.substring(i, close + 1);\n                i = close + 2;\n                continue;\n            }\n            if (format.charAt(open + 1) === \"{\") {\n                result += format.substring(i, open + 1);\n                i = open + 2;\n                continue;\n            }\n            if (close < 0) {\n                throw ErrorHelper.argument(\"format\", \"字符串格式存在孤立的'{'或'}'符号。\");\n            }\n            if (open > close) {\n                if (format.charAt(close + 1) !== \"}\") {\n                    throw ErrorHelper.argument(\"format\", \"字符串格式存在孤立的'{'或'}'符号。\");\n                }\n                result += format.substring(i, close + 1);\n                i = close + 2;\n                continue;\n            }\n            if (open + 1 === close) {\n                throw ErrorHelper.argument(\"format\", \"字符串格式存在孤立的'{'或'}'符号。\");\n            }\n            argNumber = parseInt(format.substring(open + 1, close), 10);\n            if (isNaN(argNumber)) {\n                throw ErrorHelper.argument(\"format\", \"字符串格式'{'与'}'之间包含的字符不是数字。\");\n            }\n            if (open > i) {\n                result += format.substring(i, open);\n            }\n            arg = args[argNumber];\n            if (arg !== undefined && arg !== null) {\n                result += arg.toString();\n            }\n            i = close + 1;\n        }\n        return result;\n    };\n    /**\n     * 将指定的 String 中的格式项替换为指定的args实例的值的文本等效项\n     * @param format 符合格式字符串\n     * @param args 要替换的参数值\n     * @returns format 的一个副本，其中的第一个格式项已替换为 args 的 String 等效项\n     */\n    StringHelper.format = function (format) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        return StringHelper.__format(format, args);\n    };\n    return StringHelper;\n}());\nexport default StringHelper;\n"]}