{"version":3,"sources":["Formula.js"],"names":["_NumberHelper","_interopRequireDefault","require","_ErrorHelper","_TypeHelper","DataManager","data","addition","this","_data","_addition","prototype","getValue","name","val","undefined","NumberHelper","parse","Formula","decimal","partake","TypeHelper","Function","_replaceSymbel","formula","replace","_formulaRegular","s","v1","v2","indexOf","push","_partake","symbolValue","_getFormulaValue","start","priority","c","i","valueInfo","quotation","l","length","bracketCount","value","bracketStart","substring","ErrorHelper","create","trim","nextIndex","charAt","symbol","newFormula","substr","calc","_fn","getPartake","RegExp"],"mappings":"2FAAA,IAAAA,cAAAC,uBAAAC,QAAA,mBACAC,aAAAF,uBAAAC,QAAA,kBACAE,YAAAH,uBAAAC,QAAA,yFAIA,IAAIG,YAA6B,WAM7B,SAASA,EAAYC,EAAMC,GACvBC,KAAKC,MAAQH,EACTC,IAXZC,KAAAE,UAAAH,GAYY,OAQRF,EAAYM,UAAUC,SAAW,SAAUC,GACvC,IAAIC,EAAMN,KAAKC,MAAMI,GAIrB,YAHYE,IAARD,GAAqBN,KAAKE,YAbzBL,EAAAA,KAAYC,UAAMC,IAgBhBS,cAAAA,QAAaC,MAAMH,IAbjBJ,EATgB,GA6B7BQ,QAAyB,WAXrB,SAAOA,EAAQT,EAAfU,QAkBgB,IAAZA,IAAsBA,EAAU,GAjBhCL,IAAGM,EAAKL,GACFM,YAAAA,QAAKX,SAAXS,GAEGH,EAAAA,IALXG,EAAA,GAIKA,EAAA,EAGLX,KAAOH,IAAAA,IAAPiB,SAAA,OAAA,eAAA,6BAxBJJ,EAAAK,eAAAC,GAAAC,QAAAP,EAAAQ,gBAAA,SAAAC,EAAAC,EAAAC,GAiDgB,OAvBhBT,EAAAU,QAAAD,GAAA,GAqBoBT,EAAQW,KAAKF,GAEVD,EAAKA,EAAK,kBAAoBC,EAAK,KAAO,kBAAoBA,EAAK,OApB/E,IAAGV,EAA2B,KACrCX,KAAAwB,SAAAZ,EAyFoEa,OA/DpEf,EAAQgB,iBAAmB,SAAUV,EAASW,EAAOC,GACjD,IAAIC,EAAGC,EAAwEC,EAAWC,EAAhFC,EAAIjB,EAAQkB,OAAQC,EAAe,EAAGC,EAAQ,GAAIC,GAAgB,EAC5E,IAAKP,EAAIH,EAAOG,EAAIG,EAAGH,IAtBnBnB,GADCD,EAAAA,EAAQM,OAASL,GACXqB,EAAeA,IAAAH,IAAcG,EAAA,WAEnCnB,OAAAA,GACS,IAAV,IAGA,MADKF,IAER0B,EAAAP,EA4BeM,GAASpB,EAAQsB,UAAUX,EAAOG,EAAI,IAzBlCR,MACAC,IAAKF,IA6Bb,KA5BHc,EA4BsB,EA3BN,MAAAI,aAAAA,QAALC,OAA8B,iBAAO,iBAKzD,IAAAL,IACHC,GAAA1B,EAAAK,eAAAC,EAAAsB,UAAAD,EAAA,EAAAP,IAAA,IA0BmBH,EAAQG,EAAI,GAxB5B,MAAA,IAAA,IAAcd,IAAQkB,IAAoB,GAA1C,IAAAC,EAAA,OAAAR,EAAAG,IAAAM,GAAApB,EAAAsB,UAAAX,EAAAG,IAAA,CAAAM,MAAAA,EAAAK,OAAAC,UAAAZ,EAAA,EAAAL,YAAAI,GACgBC,MACRd,IAAQ2B,IAmCR,IAAK,IAlCT,GAAe,IAAAR,EAuCH,OAtCRR,EAAqBG,IACjBM,GAAApB,EAAAsB,UAAAX,EAAAG,IAqCqB,IAAbF,EAnCZ,CAAAQ,MAAAA,EAAAK,OAAAC,UAAAZ,EAAA,EAAAL,YAAAI,IAEJE,EAAArB,EAAAgB,iBAAAV,EAAAc,EAAA,EAAA,GAwCuB,CArCfM,OAFJA,EACgB,0BAAAA,EAAAK,OAAA,IAAAV,EAAAK,MAAA,KAAAP,EAAA,MACYY,OACpBC,UAAAX,EAAAW,UACiBJ,YAARP,EAATa,SA0CJ,MAvCJ,IAAA,IACIT,GAAY,IAAAA,EAIHA,OAqCDR,EAAQG,IAxCAM,GAAMpB,EAAAsB,UAAAX,EAAAG,IAGbK,CAAYC,MAAhBA,EAAwBK,OAAAC,UAAAZ,EAAA,EAAAL,YAAAI,GAEjBC,MACX,IAAA,IAyCL,IAAK,IAxCDE,EAAAH,EA0CA,MAzCJ,IAAA,IACAF,IAAAG,GACQK,IAIgDV,OAAhDE,EAAOM,IAAEG,GAAOA,EAAMK,OAAfd,IAAyCF,CAAAA,MAAAA,EAAaI,OAAAA,UAAAA,IAChEnB,EAAAK,eAAA,SAAAC,GACD,KA+CZA,EAAUA,EAAQyB,QAEd,MAAO,GA/CH,IAAAhB,EAAAoB,EAAAZ,EAAAjB,EAAAkB,OAAAH,EAAArB,EAAAgB,iBAAAV,EAAA,EAAA,GACI,GAAAe,EAAII,YAAoBF,EACpB,OAAIN,EAAWS,MAEdS,EAAAd,EAAAK,MAkDjB,EAAG,CAhDiB,GAAO,OADXX,EAAYM,EAAQN,aACPW,OAAOA,EAAT,IAAA1B,EAAAK,eAAAC,EAAA8B,OAAAf,EAAAW,YADXG,EAGK,0BAAAA,EAAA,IACDd,IAHAA,EAAArB,EAAAgB,iBAAAV,EAAAe,EAAAW,UAAA,MAAAjB,GAAA,MAAAA,EAAA,EAAA,IAGoBC,MAAAA,KAAiBV,EAArC,WAGAe,EAAOW,UAAAT,GACHG,OAAAA,GA4D5B1B,EAAQP,UAAU4C,KAAO,SAAUjD,EAAMC,GArD7B,OAAKC,KAALgD,IAAA,IAAAnD,YAAAC,EAAAC,GAAAS,cAAAA,UA2DZE,EAAQP,UAAU8C,WAAa,WAtDX,OAAAjD,KAAOwB,UAAuBkB,EAAAA,gBAAvB,IAAAQ,OAAA,uCAAA,KAAyCzB,EA1F3C,YA2FRf","file":"Formula.js","sourcesContent":["import NumberHelper from \"./NumberHelper\";\nimport ErrorHelper from \"./ErrorHelper\";\nimport TypeHelper from \"./TypeHelper\";\n/**\n * 公式所使用的数据管理对象\n */\nvar DataManager = /** @class */ (function () {\n    /**\n     * 创建 公式所使用的数据管理对象\n     * @param data 原始数据对象\n     * @param addition 附加数据\n     */\n    function DataManager(data, addition) {\n        this._data = data;\n        if (addition) {\n            this._addition = addition;\n        }\n    }\n    /**\n     * 获取指定名称对应的值\n     * @param {string} name 要获取的值的名称\n     * @returns 返回对应的数值型值\n     */\n    DataManager.prototype.getValue = function (name) {\n        var val = this._data[name];\n        if (val === undefined && this._addition) {\n            val = this._addition[name];\n        }\n        return NumberHelper.parse(val);\n    };\n    return DataManager;\n}());\n/**\n * 公式对象\n */\nvar Formula = /** @class */ (function () {\n    /**\n     * 公式对象\n     * @param formula 字符串形式的公式表达式\n     * @param decimal 计算后的保留位\n     */\n    function Formula(formula, decimal) {\n        if (decimal === void 0) { decimal = 2; }\n        var partake = [];\n        if (!TypeHelper.isNumber(decimal)) {\n            decimal = 2;\n        }\n        else if (decimal < 0) {\n            decimal = 0;\n        }\n        this._fn = new Function(\"data\", \"NumberHelper\", \"return NumberHelper.round(\" +\n            Formula._replaceSymbel(formula).replace(Formula._formulaRegular, function (s, v1, v2) {\n                if (partake.indexOf(v2) < 0) {\n                    partake.push(v2);\n                }\n                return v1 ? v1 + 'data.getValue(\"' + v2 + '\")' : 'data.getValue(\"' + v2 + '\")';\n            }) +\n            \",\" +\n            decimal +\n            \")\");\n        this._partake = partake;\n    }\n    Formula._getFormulaValue = function (formula, start, priority) {\n        var c, i, l = formula.length, bracketCount = 0, value = \"\", bracketStart = -1, valueInfo, quotation;\n        for (i = start; i < l; i++) {\n            c = formula.charAt(i);\n            if (quotation) {\n                if (quotation === c) {\n                    quotation = null;\n                }\n                continue;\n            }\n            switch (c) {\n                case \"(\":\n                    bracketCount++;\n                    if (bracketCount === 1) {\n                        bracketStart = i;\n                        value += formula.substring(start, i + 1);\n                    }\n                    break;\n                case \")\":\n                    bracketCount--;\n                    if (bracketCount < 0) {\n                        throw ErrorHelper.create(\"FormulaInvalid\", \"当前提供的公式字符串无效。\");\n                    }\n                    else if (bracketCount === 0) {\n                        value += Formula._replaceSymbel(formula.substring(bracketStart + 1, i)) + \")\";\n                        start = i + 1;\n                    }\n                    break;\n                case \"+\":\n                case \"-\":\n                    if (bracketCount === 0) {\n                        if (start < i) {\n                            value += formula.substring(start, i);\n                        }\n                        return { value: value.trim(), nextIndex: i + 1, symbolValue: c };\n                    }\n                    break;\n                case \"*\":\n                case \"/\":\n                    if (bracketCount === 0) {\n                        if (start < i) {\n                            value += formula.substring(start, i);\n                        }\n                        if (priority === 1) {\n                            return { value: value.trim(), nextIndex: i + 1, symbolValue: c };\n                        }\n                        else {\n                            valueInfo = Formula._getFormulaValue(formula, i + 1, 1);\n                            value =\n                                \"NumberHelper.calculate(\" + value.trim() + \",\" + valueInfo.value + \",'\" + c + \"')\";\n                            return {\n                                value: value.trim(),\n                                nextIndex: valueInfo.nextIndex,\n                                symbolValue: valueInfo.symbol\n                            };\n                        }\n                    }\n                    break;\n                case \",\":\n                    if (bracketCount === 0) {\n                        if (start < i) {\n                            value += formula.substring(start, i);\n                        }\n                        return { value: value.trim(), nextIndex: i + 1, symbolValue: c };\n                    }\n                    break;\n                case '\"':\n                case \"'\":\n                    quotation = c;\n                    break;\n                case \" \":\n                    if (start === i) {\n                        start++;\n                    }\n                    break;\n            }\n        }\n        if (start < l) {\n            value += formula.substr(start);\n        }\n        return { value: value.trim(), nextIndex: l };\n    };\n    Formula._replaceSymbel = function (formula) {\n        formula = formula.trim();\n        if (!formula) {\n            return \"\";\n        }\n        var l = formula.length, valueInfo = Formula._getFormulaValue(formula, 0, 1), symbolValue, newFormula;\n        if (valueInfo.nextIndex === l) {\n            return valueInfo.value;\n        }\n        newFormula = valueInfo.value;\n        do {\n            symbolValue = valueInfo.symbolValue;\n            if (symbolValue === \",\") {\n                return newFormula + \",\" + Formula._replaceSymbel(formula.substr(valueInfo.nextIndex));\n            }\n            else {\n                valueInfo = Formula._getFormulaValue(formula, valueInfo.nextIndex, symbolValue === \"+\" || symbolValue === \"-\" ? 0 : 1);\n                newFormula = \"NumberHelper.calculate(\" + newFormula + \",\";\n                newFormula += valueInfo.value + \",'\" + symbolValue + \"')\";\n            }\n        } while (valueInfo.nextIndex < l);\n        return newFormula;\n    };\n    /**\n     * 用指定的数据进行公式计算\n     * @param data 主要数据\n     * @param addition 附加数据。当主要数据中不存在指定的数据时，从附加数据中获取\n     * @returns 返回计算结果\n     */\n    Formula.prototype.calc = function (data, addition) {\n        return this._fn(new DataManager(data, addition), NumberHelper);\n    };\n    /**\n     * 获取依赖信息\n     */\n    Formula.prototype.getPartake = function () {\n        return this._partake;\n    };\n    Formula._formulaRegular = new RegExp(\"([^a-zA-Z0-9]|^)data.([a-zA-Z0-9_]+)\", \"g\");\n    return Formula;\n}());\nexport default Formula;\n"]}