{"version":3,"sources":["Formula.js"],"names":["_NumberHelper","_interopRequireDefault","require","_ErrorHelper","_TypeHelper","DataManager","data","addition","_classCallCheck","this","_data","_addition","name","undefined","val","NumberHelper","parse","Formula","formula","decimal","arguments","length","partake","TypeHelper","isNumber","_fn","Function","_replaceSymbel","replace","_formulaRegular","s","v1","v2","indexOf","_partake","start","priority","c","i","valueInfo","quotation","l","bracketCount","value","bracketStart","charAt","substring","ErrorHelper","create","trim","nextIndex","symbolValue","_getFormulaValue","symbol","substr","newFormula","RegExp"],"mappings":"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","file":"Formula.js","sourcesContent":["import NumberHelper from \"./NumberHelper\";\nimport ErrorHelper from \"./ErrorHelper\";\nimport TypeHelper from \"./TypeHelper\";\n/**\n * 公式所使用的数据管理对象\n */\nclass DataManager {\n    /**\n     * 创建 公式所使用的数据管理对象\n     * @param data 原始数据对象\n     * @param addition 附加数据\n     */\n    constructor(data, addition) {\n        this._data = data;\n        if (addition) {\n            this._addition = addition;\n        }\n    }\n    /**\n     * 获取指定名称对应的值\n     * @param {string} name 要获取的值的名称\n     * @returns 返回对应的数值型值\n     */\n    getValue(name) {\n        let val = this._data[name];\n        if (val === undefined && this._addition) {\n            val = this._addition[name];\n        }\n        return NumberHelper.parse(val);\n    }\n}\n/**\n * 公式对象\n */\nexport default class Formula {\n    /**\n     * 公式对象\n     * @param formula 字符串形式的公式表达式\n     * @param decimal 计算后的保留位\n     */\n    constructor(formula, decimal = 2) {\n        let partake = [];\n        if (!TypeHelper.isNumber(decimal)) {\n            decimal = 2;\n        }\n        else if (decimal < 0) {\n            decimal = 0;\n        }\n        this._fn = new Function(\"data\", \"NumberHelper\", \"return NumberHelper.round(\" +\n            Formula._replaceSymbel(formula).replace(Formula._formulaRegular, (s, v1, v2) => {\n                if (partake.indexOf(v2) < 0) {\n                    partake.push(v2);\n                }\n                return v1 ? v1 + 'data.getValue(\"' + v2 + '\")' : 'data.getValue(\"' + v2 + '\")';\n            }) +\n            \",\" +\n            decimal +\n            \")\");\n        this._partake = partake;\n    }\n    static _getFormulaValue(formula, start, priority) {\n        let c, i, l = formula.length, bracketCount = 0, value = \"\", bracketStart = -1, valueInfo, quotation;\n        for (i = start; i < l; i++) {\n            c = formula.charAt(i);\n            if (quotation) {\n                if (quotation === c) {\n                    quotation = null;\n                }\n                continue;\n            }\n            switch (c) {\n                case \"(\":\n                    bracketCount++;\n                    if (bracketCount === 1) {\n                        bracketStart = i;\n                        value += formula.substring(start, i + 1);\n                    }\n                    break;\n                case \")\":\n                    bracketCount--;\n                    if (bracketCount < 0) {\n                        throw ErrorHelper.create(\"FormulaInvalid\", \"当前提供的公式字符串无效。\");\n                    }\n                    else if (bracketCount === 0) {\n                        value += Formula._replaceSymbel(formula.substring(bracketStart + 1, i)) + \")\";\n                        start = i + 1;\n                    }\n                    break;\n                case \"+\":\n                case \"-\":\n                    if (bracketCount === 0) {\n                        if (start < i) {\n                            value += formula.substring(start, i);\n                        }\n                        return { value: value.trim(), nextIndex: i + 1, symbolValue: c };\n                    }\n                    break;\n                case \"*\":\n                case \"/\":\n                    if (bracketCount === 0) {\n                        if (start < i) {\n                            value += formula.substring(start, i);\n                        }\n                        if (priority === 1) {\n                            return { value: value.trim(), nextIndex: i + 1, symbolValue: c };\n                        }\n                        else {\n                            valueInfo = Formula._getFormulaValue(formula, i + 1, 1);\n                            value =\n                                \"NumberHelper.calculate(\" + value.trim() + \",\" + valueInfo.value + \",'\" + c + \"')\";\n                            return {\n                                value: value.trim(),\n                                nextIndex: valueInfo.nextIndex,\n                                symbolValue: valueInfo.symbol\n                            };\n                        }\n                    }\n                    break;\n                case \",\":\n                    if (bracketCount === 0) {\n                        if (start < i) {\n                            value += formula.substring(start, i);\n                        }\n                        return { value: value.trim(), nextIndex: i + 1, symbolValue: c };\n                    }\n                    break;\n                case '\"':\n                case \"'\":\n                    quotation = c;\n                    break;\n                case \" \":\n                    if (start === i) {\n                        start++;\n                    }\n                    break;\n            }\n        }\n        if (start < l) {\n            value += formula.substr(start);\n        }\n        return { value: value.trim(), nextIndex: l };\n    }\n    static _replaceSymbel(formula) {\n        formula = formula.trim();\n        if (!formula) {\n            return \"\";\n        }\n        let l = formula.length, valueInfo = Formula._getFormulaValue(formula, 0, 1), symbolValue, newFormula;\n        if (valueInfo.nextIndex === l) {\n            return valueInfo.value;\n        }\n        newFormula = valueInfo.value;\n        do {\n            symbolValue = valueInfo.symbolValue;\n            if (symbolValue === \",\") {\n                return newFormula + \",\" + Formula._replaceSymbel(formula.substr(valueInfo.nextIndex));\n            }\n            else {\n                valueInfo = Formula._getFormulaValue(formula, valueInfo.nextIndex, symbolValue === \"+\" || symbolValue === \"-\" ? 0 : 1);\n                newFormula = \"NumberHelper.calculate(\" + newFormula + \",\";\n                newFormula += valueInfo.value + \",'\" + symbolValue + \"')\";\n            }\n        } while (valueInfo.nextIndex < l);\n        return newFormula;\n    }\n    /**\n     * 用指定的数据进行公式计算\n     * @param data 主要数据\n     * @param addition 附加数据。当主要数据中不存在指定的数据时，从附加数据中获取\n     * @returns 返回计算结果\n     */\n    calc(data, addition) {\n        return this._fn(new DataManager(data, addition), NumberHelper);\n    }\n    /**\n     * 获取依赖信息\n     */\n    getPartake() {\n        return this._partake;\n    }\n}\nFormula._formulaRegular = new RegExp(\"([^a-zA-Z0-9]|^)data.([a-zA-Z0-9_]+)\", \"g\");\n"]}